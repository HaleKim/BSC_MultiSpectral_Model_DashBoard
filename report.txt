### **BSC-MODS (다중 스펙트럼 객체 탐지 시스템) 종합 분석 보고서**

### **1. 시스템 개요**

본 시스템은 **실시간 다중 스펙트럼 영상 관제 대시보드**로, Python **Flask** 기반의 백엔드 서버와 **React** 기반의 프론트엔드 웹 애플리케이션으로 구성된 풀스택(Full-stack) 시스템입니다.

핵심 기능은 카메라 또는 영상 파일로부터 RGB 및 TIR(열화상) 데이터를 동시에 입력받아, **YOLO AI 모델**을 통해 실시간으로 객체(사람, 동물 등)를 탐지하고 분석 결과를 웹 대시보드에 시각화하는 것입니다. 이벤트 발생 시 해당 구간의 영상을 자동으로 녹화 및 저장하며, 관리자는 웹을 통해 사용자, 카메라, AI 모델 등의 시스템 설정을 제어할 수 있습니다.

### **2. 기술 스택**

*   **Backend**:
    *   **웹 프레임워크**: Flask, Flask-SocketIO
    *   **비동기 서버**: Eventlet
    *   **데이터베이스**: Flask-SQLAlchemy, MySQL
    *   **인증**: Flask-JWT-Extended (JWT)
    *   **AI / 영상 처리**: PyTorch, Ultralytics (YOLO), OpenCV, NumPy

*   **Frontend**:
    *   **UI 프레임워크**: React
    *   **상태 관리**: React Context API
    *   **라우팅**: React Router
    *   **HTTP 통신**: Axios
    *   **실시간 통신**: Socket.io-client
    *   **스타일링**: Tailwind CSS

### **3. 파일 및 폴더 구성**

프로젝트는 `backend`와 `frontend` 두 개의 주요 디렉토리로 명확하게 분리되어 있습니다.

*   **`backend/`**: 서버 측 로직 및 AI 모델 포함
    *   `run.py`: 서버를 실행하는 메인 스크립트.
    *   `app/`: Flask 애플리케이션의 핵심 소스 코드.
        *   `api/`: REST API 라우팅 및 로직.
        *   `auth/`: 로그인 등 인증 관련 라우팅.
        *   `models/`: 데이터베이스 테이블 스키마 정의.
        *   `services/`: AI 영상 처리 등 핵심 비즈니스 로직.
        *   `sockets/`: WebSocket 이벤트 핸들러.
    *   `models_ai/`: 학습된 YOLO AI 모델(`.pt`) 파일 저장.
    *   `event_recordings/`: 이벤트 발생 시 녹화된 영상 저장.
    *   `test_videos/`: 분석 테스트에 사용될 영상 저장.

*   **`frontend/`**: 사용자 인터페이스(UI) 관련 모든 코드 포함
    *   `public/`: `index.html` 등 정적 파일.
    *   `src/`: React 애플리케이션의 핵심 소스 코드.
        *   `assets/`: 로고, 아이콘, 배경 이미지 등 리소스.
        *   `components/`: `VideoStream`, `EventLog` 등 재사용 가능한 UI 단위.
        *   `context/`: `AuthContext` 등 전역 상태 관리.
        *   `pages/`: `MainPage`, `LoginPage` 등 주요 화면(페이지) 단위.
        *   `services/`: `api.js`, `socket.js` 등 백엔드 통신 로직.

### **4. 시스템 아키텍처 및 데이터 흐름**

시스템은 크게 **인증**, **실시간 분석**, **데이터 관리** 세 가지 흐름으로 동작합니다.

1.  **인증 흐름**:
    *   **(FE)** 사용자가 로그인 페이지에서 ID/PW를 입력합니다.
    *   **(BE)** `api.js`를 통해 백엔드 `/api/auth/login`으로 요청이 전송되고, 서버는 사용자 정보를 확인 후 **JWT 토큰**을 발급합니다.
    *   **(FE)** 프론트엔드는 발급받은 토큰을 `localStorage`에 저장하고, `AuthContext`를 통해 앱 전체에 로그인 상태를 공유합니다. 이후 모든 API 요청 시 이 토큰을 사용해 자신을 인증합니다.

2.  **실시간 분석 흐름**:
    *   **(FE)** 사용자가 대시보드에서 '실시간 감시'를 시작하면, `socket.js`를 통해 백엔드에 `start_stream` 이벤트를 전송합니다.
    *   **(BE)** `sockets/events.py`가 이벤트를 수신하여, `services/video_service.py`의 영상 처리 함수를 **백그라운드 스레드**로 실행시킵니다.
    *   **(BE)** `video_service`는 OpenCV로 영상 프레임을 캡처하고, YOLO 모델로 추론하여 객체를 탐지합니다.
    *   **(BE)** 분석이 완료된 영상 프레임(RGB/TIR)과 탐지 결과는 `video_frame` 이벤트로, 객체 탐지 시 발생하는 이벤트 정보는 `new_event` 이벤트로 다시 프론트엔드에 **실시간 전파(Broadcast)**됩니다.
    *   **(FE)** `Dashboard.js`와 `EventLog.js`는 이벤트를 수신하여 `VideoStream` 컴포넌트의 화면과 이벤트 로그 목록을 즉시 업데이트합니다.

3.  **이벤트 녹화 및 조회 흐름**:
    *   **(BE)** `video_service`에서 객체 탐지 시, 이벤트 발생 시점의 **전후 10초(총 20초)** 분량의 영상 프레임을 버퍼에서 가져와 영상 파일로 저장하고, 관련 정보를 DB에 기록합니다.
    *   **(FE)** 사용자는 `EventLog`에서 특정 이벤트를 클릭하여 `EventDetailViewer`를 통해 상세 정보와 함께 저장된 녹화 영상을 확인할 수 있습니다. 영상 파일은 백엔드 API를 통해 스트리밍됩니다.

### **5. 파일별 상세 기능 분석**

#### **Backend**

*   **1. 서버 실행 및 설정 (`run.py`, `app/config.py`, `app/extensions.py`)**
    *   **`run.py`**:
        *   **Eventlet**을 사용한 비동기 소켓 서버를 실행하는 진입점입니다.
        *   `Ctrl+C`로 서버 종료 시 실행 중인 모든 영상 처리 작업을 안전하게 종료하는 **Graceful Shutdown** 기능이 구현되어 있습니다.
        *   서버 시작 시 이벤트 녹화 영상이 저장될 `event_recordings` 폴더를 자동으로 생성합니다.
    *   **`app/config.py`**:
        *   개발/프로덕션 환경에 따라 다른 설정을 로드합니다.
        *   데이터베이스 접속 정보(`DATABASE_URL`), JWT 비밀키 등 민감한 정보를 환경 변수(`.env` 파일)에서 관리합니다.
    *   **`app/extensions.py`**:
        *   Flask 앱에서 사용할 확장(SQLAlchemy, JWT, CORS, SocketIO) 인스턴스를 생성하여 코드 전체에서 일관되게 사용하도록 합니다.

*   **2. 데이터베이스 모델 (`app/models/db_models.py`)**
    *   **SQLAlchemy**를 사용하여 데이터베이스 테이블을 Python 클래스로 정의합니다.
    *   **`User`**: 사용자 정보(ID, 이름, 권한 등)를 저장합니다. 비밀번호는 해시하여 안전하게 보관합니다.
    *   **`Camera`**: 카메라 정보(ID, 이름, RTSP 주소, 위치)를 관리합니다.
    *   **`DetectionEvent`**: 객체 탐지 이벤트 정보를 저장합니다. (언제, 어떤 카메라에서, 무엇을, 어떤 정확도로 탐지했는지)
    *   **`EventFile`**: 각 탐지 이벤트에 연관된 파일(녹화 영상, 썸네일)의 경로를 저장합니다.

*   **3. 인증 (`app/auth/routes.py`)**
    *   **`/api/auth/login`**: 사용자가 ID/PW로 로그인하면 서버는 **JWT(JSON Web Token)**를 발급합니다.
    *   **`/api/auth/profile`**: 클라이언트는 발급받은 JWT를 API 요청 시 헤더에 포함하여 자신의 신원을 증명하고, 서버는 이를 통해 로그인된 사용자 정보를 반환합니다.

*   **4. 핵심 API (`app/api/routes.py`)**
    *   **관리자 전용 API**: JWT의 역할(`role`)을 확인하여 'admin'인 경우에만 특정 API(사용자/카메라 관리, 기본 모델 설정)를 호출할 수 있도록 제한합니다.
    *   **데이터 조회**: 이벤트 목록, 사용자 목록, 카메라 목록, AI 모델 목록(`models_ai` 폴더 스캔), 테스트 영상 목록(`test_videos` 폴더 스캔)을 반환합니다.
    *   **파일 서빙**: 녹화된 이벤트 영상(`event_recordings`)이나 테스트 영상을 클라이언트의 `<video>` 태그에서 직접 재생할 수 있도록 파일을 스트리밍합니다.

*   **5. 실시간 통신 (`app/sockets/events.py`)**
    *   **Socket.IO**를 사용하여 클라이언트와 서버 간의 실시간 양방향 통신을 처리합니다.
    *   **`connect`/`disconnect`**: 클라이언트 연결 및 연결 해제 시 로그를 남기고, 연결이 끊어지면 해당 클라이언트가 실행하던 모든 영상 분석 작업을 자동으로 종료하여 서버 자원을 정리합니다.
    *   **`start_stream`**: 실시간 카메라 영상 분석을 요청받으면, `video_service`의 `start_video_processing` 함수를 백그라운드 스레드로 실행시킵니다.
    *   **`start_test_stream`**: 저장된 테스트 영상(RGB/TIR) 분석을 요청받으면 위와 동일한 함수를 실행합니다.
    *   **`stop_stream`/`stop_test_stream`**: 진행 중인 분석 작업을 중지시킵니다.
    *   **`test_video_control`**: 테스트 영상의 재생/일시정지/시간 이동/배속 변경을 제어합니다.

*   **6. AI 및 영상 처리 서비스 (`app/services/video_service.py`)**
    *   **영상 처리의 심장부**로, 가장 복잡하고 핵심적인 로직을 포함합니다.
    *   **`start_video_processing`**:
        1.  **영상 소스 열기**: 실시간 스트림(웹캠) 또는 영상 파일(`cv2.VideoCapture`).
        2.  **AI 모델 로드**: `ultralytics` 라이브러리로 YOLO 모델을 로드합니다.
        3.  **메인 루프**:
            *   영상에서 프레임을 하나씩 읽습니다.
            *   읽은 프레임은 **시간 기반 버퍼(`deque`)**에 최대 10~12초 분량으로 계속 저장됩니다.
            *   RGB와 TIR 프레임을 합쳐 4채널 데이터로 만든 후 AI 모델에 입력하여 객체를 탐지(`model.track`)합니다.
            *   탐지 결과를 프레임에 바운딩 박스로 그리고, 인코딩(`base64`)하여 `video_frame` 이벤트를 통해 클라이언트로 전송합니다.
        4.  **이벤트 탐지 및 녹화**:
            *   '사람' 또는 '동물'이 일정 신뢰도(confidence) 이상으로 탐지되면 **이벤트 발생**으로 간주합니다.
            *   이벤트 발생 시, DB에 `DetectionEvent`를 기록하고 **즉시 녹화를 시작**합니다.
            *   녹화는 이벤트 발생 시점의 버퍼에 저장된 **이전 10초** 분량과, 앞으로 들어올 **이후 10초** 분량을 합쳐 총 20초짜리 영상 클립으로 저장됩니다.
            *   영상 저장은 **별도의 스레드**에서 처리하여 메인 루프의 지연을 방지합니다. 웹브라우저 호환성을 위해 **H.264(mp4)** 코덱을 우선적으로 사용합니다.

*   **7. AI 모델 커스텀 클래스 (`app/services/custom_classes.py`)**
    *   YOLO 모델의 일부 레이어를 변형한 커스텀 모듈(e.g., `C3k`, `C2PSA`, `Attention`)이 정의되어 있습니다.
    *   이는 Ultralytics의 기본 모델 구조를 수정하여 특정 목적(예: 다중 스펙트럼 퓨전)에 맞게 성능을 개선하기 위한 코드로 보입니다.

*   **8. 모델 및 설정 파일 (`models.yaml`, `settings.json`)**
    *   **`models.yaml`**: 시스템에서 사용 가능한 AI 모델들의 메타데이터(이름, 파일 경로, 타입, 설명)를 정의합니다. (현재 코드에서는 직접적으로 사용되지는 않는 것으로 보입니다.)
    *   **`settings.json`**: 시스템 전체에서 사용할 **기본 AI 모델** 파일명을 저장합니다. 이 파일의 내용은 API를 통해 변경할 수 있습니다.

#### **Frontend**

*   **1. 프로젝트 설정 및 진입점 (`package.json`, `src/index.js`, `src/App.js`)**
    *   **`package.json`**:
        *   **React** 기반 프로젝트임을 명시합니다.
        *   주요 라이브러리로 `axios`(API 통신), `socket.io-client`(실시간 통신), `react-router-dom`(페이지 라우팅), `tailwindcss`(UI 스타일링) 등을 사용합니다.
    *   **`src/index.js`**: React 앱을 실제 DOM에 렌더링하는 시작점입니다.
    *   **`src/App.js`**:
        *   애플리케이션의 최상위 컴포넌트입니다.
        *   **`AuthProvider`**로 전체 앱을 감싸 자식 컴포넌트들이 로그인 상태를 공유할 수 있게 합니다.
        *   **`Router`**를 설정하고, URL 경로에 따라 `LoginPage`, `MainPage`, `AdminPage`를 보여주는 라우팅 규칙을 정의합니다.
        *   `ProtectedRoute`와 `AdminRoute`를 사용하여 특정 페이지에 대한 접근 권한을 제어합니다.

*   **2. 핵심 페이지 (`src/pages/*.js`)**
    *   **`LoginPage.js`**:
        *   사용자 아이디와 비밀번호를 입력받는 로그인 화면입니다.
        *   로그인 성공 시 메인 페이지로, 실패 시 에러 메시지를 표시합니다.
    *   **`MainPage.js`**:
        *   로그인 후 보여지는 핵심 대시보드 페이지입니다.
        *   상단 헤더에는 현재 시간, 로고, 사용자 정보, 로그아웃/관리자 페이지 이동 버튼이 있습니다.
        *   실제 영상 스트림과 이벤트 로그를 표시하는 `Dashboard` 컴포넌트를 렌더링합니다.
    *   **`AdminPage.js`**:
        *   관리자만 접근 가능한 페이지입니다.
        *   사용자 관리, 카메라 관리, AI 모델 설정을 할 수 있는 `AdminPanel` 컴포넌트를 렌더링합니다.

*   **3. 재사용 UI 컴포넌트 (`src/components/*.js`)**
    *   **`Dashboard.js`**:
        *   **메인 대시보드의 레이아웃과 상태를 총괄**합니다.
        *   '실시간 감시'와 '시험 영상 분석' 모드를 전환하는 로직을 포함합니다.
        *   백엔드와 소켓 연결을 초기화하고, `video_frame`, `new_event` 같은 실시간 이벤트를 수신하여 상태를 업데이트합니다.
    *   **`VideoStream.js`**:
        *   개별 비디오(RGB/TIR) 스트림을 표시하는 컴포넌트입니다.
        *   서버로부터 받은 Base64 인코딩된 이미지 데이터를 화면에 렌더링합니다.
        *   객체 탐지 시(`personDetected=true`) CSS 애니메이션으로 시각적인 경고(깜빡임)를 표시합니다.
    *   **`EventLog.js`**:
        *   실시간으로 발생하는 탐지 이벤트를 목록 형태로 보여줍니다.
        *   초기에는 API로 최근 이벤트 목록을 가져오고, 이후에는 소켓을 통해 수신되는 새 이벤트를 목록 맨 위에 추가합니다.
    *   **`TestModePanel.js`**:
        *   '시험 영상 분석' 모드에서 사용되는 UI입니다.
        *   사용자가 테스트할 영상과 AI 모델을 선택하고, 분석 시작/중지를 제어할 수 있습니다.
        *   분석 중인 영상의 재생, 일시정지, 시간 이동, 배속 변경을 제어하는 컨트롤러를 포함합니다.
    *   **`AdminPanel.js`**:
        *   관리자 페이지의 핵심 기능(사용자, 카메라, AI 모델 관리)을 수행하는 UI 컴포넌트입니다. 백엔드 API를 호출하여 데이터를 변경하고 표시합니다.
    *   **`EventDetailViewer.js` & `FullscreenViewer.js`**:
        *   각각 이벤트 상세 정보와 녹화 영상, 실시간 영상을 전체 화면 모달 창으로 보여주는 컴포넌트입니다.

*   **4. 백엔드 통신 서비스 (`src/services/*.js`)**
    *   **`api.js`**:
        *   **Axios**를 사용하여 백엔드 REST API와 통신하는 함수들을 모아놓은 모듈입니다.
        *   로그인, 프로필 조회, 이벤트/사용자/카메라/모델 목록 조회, 추가, 삭제 등 모든 HTTP 요청을 담당합니다.
        *   요청을 보낼 때마다 자동으로 `localStorage`의 JWT 토큰을 헤더에 추가하는 인터셉터(interceptor) 기능이 있습니다.
    *   **`socket.js`**:
        *   **Socket.IO 클라이언트**를 관리하는 모듈입니다.
        *   `initSocket` 함수로 소켓 연결을 초기화하고, `disconnectSocket`으로 연결을 해제합니다.
        *   `sendEvent`로 서버에 메시지를 보내고, `subscribeToEvent`로 서버로부터 오는 특정 이벤트를 수신 대기합니다.

*   **5. 전역 상태 관리 (`src/context/AuthContext.js`)**
    *   **React Context API**를 사용하여 사용자 인증 상태를 전역적으로 관리합니다.
    *   `user` 상태(로그인한 사용자 정보)와 `login`, `logout` 함수를 제공하여 앱 내 모든 컴포넌트가 로그인 상태에 접근하고 변경할 수 있도록 합니다.
    *   앱이 시작될 때 `localStorage`에 저장된 토큰을 확인하여 자동으로 로그인 상태를 복원하는 기능이 있습니다.

### **6. 전체 구현 내용 요약**

*   **DB**: SQLAlchemy ORM을 통해 관리되는 MySQL 데이터베이스는 `사용자`, `카메라`, `탐지 이벤트`, `이벤트 파일` 정보를 영구적으로 저장합니다. 각 테이블은 관계(Relationship)로 연결되어 데이터의 정합성을 유지합니다.

*   **Backend**: Flask 기반의 백엔드는 시스템의 엔진 역할을 합니다. REST API를 통해 데이터 관리 기능을 제공하고, WebSocket을 통해 실시간 통신을 처리합니다. 핵심 서비스인 `video_service`는 OpenCV와 YOLO 모델을 사용하여 영상 분석, 이벤트 탐지, 자동 녹화 등 핵심 비즈니스 로직을 수행합니다.

*   **Frontend**: React로 개발된 사용자 인터페이스는 실시간 분석 결과를 시각화하고 시스템 제어 수단을 제공합니다. `Dashboard`를 중심으로 컴포넌트화된 UI는 Axios와 Socket.IO 클라이언트를 통해 백엔드와 상호작용하며, 사용자는 이를 통해 실시간 영상, 이벤트 로그, 관리자 패널 등의 기능을 사용합니다.
