{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 테스트 영상 목록 요청\nexport const getTestVideos = () => {\n  return apiClient.get('/api/test_videos');\n};\nexport const login = (username, password) => {\n  return apiClient.post('/api/auth/login', {\n    username,\n    password\n  });\n};\nexport const getProfile = () => {\n  return apiClient.get('/api/auth/profile');\n};\nexport const getModels = () => {\n  return apiClient.get('/api/models');\n};\nexport const getEvents = () => {\n  return apiClient.get('/api/events');\n};\n\n// 이 파일의 다른 함수들이 apiClient를 사용할 수 있도록 아래 코드가 추가되어야 합니다.\n// 하지만 기술 문서에는 없으므로, AdminPage에서 직접 apiClient를 임포트하는 대신\n// 필요한 API 함수를 여기서 만들어서 export 해야 합니다.\n// 기술 문서의 AdminPage.js 코드를 보면 apiClient를 직접 쓰게 되어 있으나,\n// api.js의 설계상 맞지 않습니다. 아래와 같이 getUsers 함수를 추가하고\n// AdminPage.js에서 apiClient 대신 getUsers를 임포트하는 것이 더 올바른 구조입니다.\n// 하지만 우선 기술문서대로 동작하게 하려면, apiClient를 export 해야합니다.\n// --> 기술문서의 AdminPage가 apiClient를 직접 호출하므로, api.js에서 apiClient를 export 해줘야 합니다.\n// 기술문서 230-236을 보면 apiClient를 export하는 구문이 없습니다. 이는 문서의 불일치로 보입니다.\n// AdminPage.js (312)에서 apiClient를 직접 호출하므로, api.js는 apiClient를 export해야만 합니다.\n\n// 임시 수정: 기술문서대로 동작시키기 위해 apiClient를 export합니다.\nexport { apiClient };","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getTestVideos","get","login","username","password","post","getProfile","getModels","getEvents"],"sources":["D:/Project2/DashBoard/ver.2/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 테스트 영상 목록 요청\r\nexport const getTestVideos = () => {\r\n    return apiClient.get('/api/test_videos');\r\n};\r\n\r\nexport const login = (username, password) => {\r\n  return apiClient.post('/api/auth/login', { username, password });\r\n};\r\nexport const getProfile = () => {\r\n  return apiClient.get('/api/auth/profile');\r\n};\r\nexport const getModels = () => {\r\n  return apiClient.get('/api/models');\r\n};\r\nexport const getEvents = () => {\r\n  return apiClient.get('/api/events');\r\n};\r\n\r\n// 이 파일의 다른 함수들이 apiClient를 사용할 수 있도록 아래 코드가 추가되어야 합니다.\r\n// 하지만 기술 문서에는 없으므로, AdminPage에서 직접 apiClient를 임포트하는 대신\r\n// 필요한 API 함수를 여기서 만들어서 export 해야 합니다.\r\n// 기술 문서의 AdminPage.js 코드를 보면 apiClient를 직접 쓰게 되어 있으나,\r\n// api.js의 설계상 맞지 않습니다. 아래와 같이 getUsers 함수를 추가하고\r\n// AdminPage.js에서 apiClient 대신 getUsers를 임포트하는 것이 더 올바른 구조입니다.\r\n// 하지만 우선 기술문서대로 동작하게 하려면, apiClient를 export 해야합니다.\r\n// --> 기술문서의 AdminPage가 apiClient를 직접 호출하므로, api.js에서 apiClient를 export 해줘야 합니다.\r\n// 기술문서 230-236을 보면 apiClient를 export하는 구문이 없습니다. 이는 문서의 불일치로 보입니다.\r\n// AdminPage.js (312)에서 apiClient를 직접 호출하므로, api.js는 apiClient를 export해야만 합니다.\r\n\r\n// 임시 수정: 기술문서대로 동작시키기 위해 apiClient를 export합니다.\r\nexport { apiClient };"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFN,SAAS,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAGA,CAAA,KAAM;EAC/B,OAAOlB,SAAS,CAACmB,GAAG,CAAC,kBAAkB,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC3C,OAAOtB,SAAS,CAACuB,IAAI,CAAC,iBAAiB,EAAE;IAAEF,QAAQ;IAAEC;EAAS,CAAC,CAAC;AAClE,CAAC;AACD,OAAO,MAAME,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAOxB,SAAS,CAACmB,GAAG,CAAC,mBAAmB,CAAC;AAC3C,CAAC;AACD,OAAO,MAAMM,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAOzB,SAAS,CAACmB,GAAG,CAAC,aAAa,CAAC;AACrC,CAAC;AACD,OAAO,MAAMO,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO1B,SAAS,CAACmB,GAAG,CAAC,aAAa,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASnB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}