{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// src/components/Dashboard.js\nimport React, { useEffect, useState, useCallback, useMemo, useRef, useContext } from 'react';\nimport VideoStream from './VideoStream';\nimport EventLog from './EventLog';\nimport TestModePanel from './TestModePanel';\nimport FullscreenViewer from './FullscreenViewer';\nimport EventDetailViewer from './EventDetailViewer';\nimport { initSocket, disconnectSocket, subscribeToEvent, sendEvent, getSocket } from '../services/socket';\nimport { getDefaultModel } from '../services/api';\nimport AuthContext from '../context/AuthContext';\nimport alertSound from '../assets/alarm.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  var _liveFrames$viewer$ca;\n  const {\n    user\n  } = useContext(AuthContext);\n  const [serverMessage, setServerMessage] = useState('');\n  const [mode, setMode] = useState('live');\n\n  // 카메라가 1대라면 [0], 2대면 [0,1]로 변경\n  const cameraIds = useMemo(() => [0], []);\n\n  // 프레임/상태\n  const [liveFrames, setLiveFrames] = useState({\n    0: {\n      rgb: null,\n      tir: null\n    }\n  });\n  const [isStreaming, setIsStreaming] = useState({\n    0: false\n  });\n  const [personDetected, setPersonDetected] = useState({\n    0: false\n  });\n\n  // ✅ 모달 상태: 스냅샷이 아니라 \"선택 정보\"만 저장\n  // { cameraId, stream: 'rgb' | 'tir', title }\n  const [viewer, setViewer] = useState(null);\n  const openViewer = (cameraId, stream, title) => setViewer({\n    cameraId,\n    stream,\n    title\n  });\n  const closeViewer = () => setViewer(null);\n\n  // 전체 화면 이벤트 뷰어 상태\n  const [fullViewEvent, setFullViewEvent] = useState(null);\n  const handleOpenFullEvent = event => setFullViewEvent(event);\n  const handleCloseFullEvent = () => setFullViewEvent(null);\n\n  // 모드 전환 중 상태 (백엔드 호환성을 위해 추가)\n  const [isModeChanging, setIsModeChanging] = useState(false);\n\n  // 실시간 감시용 모델 관리 (간소화)\n  const [selectedLiveModel, setSelectedLiveModel] = useState('yolo11n_early_fusion.pt');\n  const audioRef = useRef(null);\n\n  // 소켓 연결/해제 및 이벤트 수신 전용 useEffect\n  useEffect(() => {\n    console.log('Dashboard 컴포넌트 마운트 - 소켓 초기화 시작');\n    initSocket();\n\n    // 서버 응답 메시지 수신\n    subscribeToEvent('response', data => {\n      console.log('서버 응답 수신:', data);\n      setServerMessage(data.message);\n    });\n\n    // 비디오 프레임 수신\n    subscribeToEvent('video_frame', data => {\n      console.log('비디오 프레임 수신:', {\n        camera_id: data.camera_id,\n        has_rgb: !!data.rgb,\n        has_tir: !!data.tir,\n        person_detected: data.person_detected,\n        rgb_length: data.rgb ? data.rgb.length : 0,\n        tir_length: data.tir ? data.tir.length : 0\n      });\n      if (typeof data.camera_id === 'number') {\n        console.log(`카메라 ${data.camera_id} 프레임 처리 중...`);\n        setLiveFrames(prev => {\n          const newFrames = {\n            ...prev,\n            [data.camera_id]: {\n              rgb: data.rgb,\n              tir: data.tir\n            }\n          };\n          console.log(`새 프레임 설정:`, newFrames);\n          return newFrames;\n        });\n        setPersonDetected(prev => ({\n          ...prev,\n          [data.camera_id]: data.person_detected\n        }));\n        console.log(`카메라 ${data.camera_id} 프레임 처리 완료`);\n      } else if (data.camera_id === 'test_video') {\n        console.log('시험 영상 프레임 수신');\n      }\n    });\n\n    // 연결 상태 확인 (백엔드 호환성을 위해 추가)\n    const checkConnection = setInterval(() => {\n      const socket = getSocket();\n      if (socket) {\n        console.log('소켓 연결 상태:', socket.connected, 'ID:', socket.id);\n      }\n    }, 5000);\n    return () => {\n      console.log('Dashboard 컴포넌트 언마운트 - 소켓 정리');\n      clearInterval(checkConnection);\n      disconnectSocket();\n    };\n  }, []);\n\n  // 실시간 스트림 시작 함수 (백엔드 호환성을 위해 복원)\n  const startAllStreams = useCallback(async () => {\n    console.log('실시간 스트림 시작 시도...');\n    setIsModeChanging(true);\n    try {\n      // 소켓 연결 상태 확인\n      const socket = getSocket();\n      if (!socket || !socket.connected) {\n        console.error('소켓이 연결되지 않았습니다. 소켓 초기화를 다시 시도합니다.');\n        initSocket();\n        // 잠시 대기 후 다시 시도\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // 모든 카메라에 대해 스트림 시작 요청 (선택된 모델 포함)\n      for (const id of cameraIds) {\n        console.log(`카메라 ${id + 1} 스트림 시작 요청 (모델: ${selectedLiveModel})`);\n        sendEvent('start_stream', {\n          camera_id: id,\n          model: isAdmin ? selectedLiveModel : undefined // 관리자만 모델 지정\n        });\n        setIsStreaming(prev => ({\n          ...prev,\n          [id]: true\n        }));\n      }\n\n      // 스트림 상태 초기화\n      console.log('스트림 상태 초기화 중...');\n      setLiveFrames({\n        0: {\n          rgb: null,\n          tir: null\n        }\n      });\n      setPersonDetected({\n        0: false\n      });\n      console.log('초기 상태 설정 완료');\n      console.log('실시간 스트림 시작 완료');\n    } catch (error) {\n      console.error('스트림 시작 오류:', error);\n    } finally {\n      setIsModeChanging(false);\n    }\n  }, [cameraIds]);\n\n  // 모든 스트림을 중지하는 함수 (백엔드 호환성을 위해 복원)\n  const stopAllStreams = useCallback(async () => {\n    console.log('모든 스트림 중지 시도...');\n    setIsModeChanging(true);\n    try {\n      // 모든 카메라에 대해 스트림 중지 요청\n      for (const id of cameraIds) {\n        console.log(`카메라 ${id + 1} 스트림 중지 요청`);\n        sendEvent('stop_stream', {\n          camera_id: id\n        });\n      }\n\n      // 스트림 상태 초기화\n      setIsStreaming({\n        0: false\n      });\n      setLiveFrames({\n        0: {\n          rgb: null,\n          tir: null\n        }\n      });\n      setPersonDetected({\n        0: false\n      });\n      console.log('모든 스트림 중지 완료');\n    } catch (error) {\n      console.error('스트림 중지 오류:', error);\n    } finally {\n      setIsModeChanging(false);\n    }\n  }, [cameraIds]);\n\n  // 모드 변경에 따라 스트림 시작/중지 (백엔드 호환성을 위해 수정)\n  useEffect(() => {\n    if (isModeChanging) return; // 모드 변경 중이면 무시\n\n    if (mode === 'live') {\n      console.log('실시간 모드로 전환 - 스트림 시작');\n      // 실시간 모드로 전환 시 즉시 스트림 시작\n      startAllStreams();\n    } else {\n      console.log('시험 모드로 전환 - 스트림 중지');\n      // 시험 모드로 전환 시 즉시 스트림 중지\n      stopAllStreams();\n    }\n  }, [mode, startAllStreams, stopAllStreams, isModeChanging]);\n\n  // 알람음 (옵션)\n  useEffect(() => {\n    if (personDetected[0] && audioRef.current) {\n      audioRef.current.play().catch(error => console.error(\"오디오 재생 오류:\", error));\n    }\n  }, [personDetected]);\n\n  // 관리자 권한 체크 (AdminRoute와 동일한 기준)\n  const isAdmin = user && user.role === 'admin';\n\n  // 디버깅: 사용자 정보 확인\n  useEffect(() => {\n    console.log('현재 사용자 정보:', user);\n    console.log('관리자 권한:', isAdmin);\n    if (user) {\n      console.log('사용자 역할:', user.role);\n    }\n  }, [user, isAdmin]);\n\n  // settings.json에서 기본 모델 동기화\n  useEffect(() => {\n    const loadDefaultModel = async () => {\n      try {\n        const response = await getDefaultModel();\n        const defaultModel = response.data.default_model;\n        setSelectedLiveModel(defaultModel);\n        localStorage.setItem('selectedLiveModel', defaultModel);\n        console.log('Dashboard: settings.json에서 기본 모델 로드:', defaultModel);\n\n        // 모델 로드 후 즉시 스트림 재시작 (실시간 모드인 경우)\n        if (mode === 'live' && Object.values(isStreaming).some(streaming => streaming)) {\n          console.log('기본 모델 변경으로 인한 스트림 재시작');\n          stopAllStreams();\n          setTimeout(() => startAllStreams(), 1000);\n        }\n      } catch (error) {\n        // 오류 시 localStorage fallback\n        const savedModel = localStorage.getItem('selectedLiveModel');\n        if (savedModel) {\n          setSelectedLiveModel(savedModel);\n        }\n        console.error('기본 모델 로드 실패:', error);\n      }\n    };\n    loadDefaultModel();\n  }, [mode, isStreaming, startAllStreams, stopAllStreams]);\n\n  // 모드 변경 핸들러 (백엔드 호환성을 위해 추가)\n  const handleModeChange = newMode => {\n    if (isModeChanging) return; // 모드 변경 중이면 무시\n\n    // 테스트 모드는 관리자만 접근 가능 (AdminRoute와 동일한 체크)\n    if (newMode === 'test' && (!user || user.role !== 'admin')) {\n      alert('테스트 영상 분석 기능은 관리자만 사용할 수 있습니다.');\n      return;\n    }\n    console.log(`모드 변경: ${mode} -> ${newMode}`);\n    setMode(newMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange('live'),\n        disabled: isModeChanging,\n        className: `px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'live' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'} ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`,\n        children: isModeChanging && mode === 'live' ? '전환 중...' : '실시간 다중 감시'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), user && isAdmin && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange('test'),\n        disabled: isModeChanging,\n        className: `px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'test' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'} ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`,\n        children: isModeChanging && mode === 'test' ? '전환 중...' : '시험 영상 분석 (관리자)'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xs text-gray-400 mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC0AC\\uC6A9\\uC790: \", user ? user.username : '없음']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC5ED\\uD560: \", user ? user.role : '없음']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uAD00\\uB9AC\\uC790: \", isAdmin ? '예' : '아니오']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), isModeChanging && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-4 p-2 bg-blue-900 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-6 w-6 border-b-2 border-white mx-auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white mt-2\",\n        children: \"\\uBAA8\\uB4DC \\uC804\\uD658 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:items-start\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-2 space-y-6\",\n        children: mode === 'live' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 gap-4\",\n          children: cameraIds.map(cameraId => {\n            var _liveFrames$cameraId, _liveFrames$cameraId2;\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(VideoStream, {\n                title: `카메라 ${cameraId + 1} - RGB`,\n                frameData: (_liveFrames$cameraId = liveFrames[cameraId]) === null || _liveFrames$cameraId === void 0 ? void 0 : _liveFrames$cameraId.rgb,\n                isStreaming: isStreaming[cameraId],\n                onStreamClick: () => openViewer(cameraId, 'rgb', `카메라 ${cameraId + 1} - RGB`),\n                personDetected: personDetected[cameraId]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(VideoStream, {\n                title: `카메라 ${cameraId + 1} - TIR`,\n                frameData: (_liveFrames$cameraId2 = liveFrames[cameraId]) === null || _liveFrames$cameraId2 === void 0 ? void 0 : _liveFrames$cameraId2.tir,\n                isStreaming: isStreaming[cameraId],\n                onStreamClick: () => openViewer(cameraId, 'tir', `카메라 ${cameraId + 1} - TIR`),\n                personDetected: personDetected[cameraId]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this)]\n            }, `${cameraId}-rgb`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TestModePanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6 h-full\",\n        children: [serverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-blue-900 rounded-lg text-center mb-4\",\n          children: serverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), mode === 'live' && /*#__PURE__*/_jsxDEV(EventLog, {\n          onOpenFull: handleOpenFullEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), viewer && /*#__PURE__*/_jsxDEV(FullscreenViewer, {\n      title: viewer.title,\n      frameData: (_liveFrames$viewer$ca = liveFrames[viewer.cameraId]) === null || _liveFrames$viewer$ca === void 0 ? void 0 : _liveFrames$viewer$ca[viewer.stream],\n      onClose: closeViewer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }, this), fullViewEvent && /*#__PURE__*/_jsxDEV(EventDetailViewer, {\n      event: fullViewEvent,\n      onClose: handleCloseFullEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: alertSound\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"gcZE4ctiUIPbwR01GdiPSkpCEV0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useMemo","useRef","useContext","VideoStream","EventLog","TestModePanel","FullscreenViewer","EventDetailViewer","initSocket","disconnectSocket","subscribeToEvent","sendEvent","getSocket","getDefaultModel","AuthContext","alertSound","jsxDEV","_jsxDEV","Dashboard","_s","_liveFrames$viewer$ca","user","serverMessage","setServerMessage","mode","setMode","cameraIds","liveFrames","setLiveFrames","rgb","tir","isStreaming","setIsStreaming","personDetected","setPersonDetected","viewer","setViewer","openViewer","cameraId","stream","title","closeViewer","fullViewEvent","setFullViewEvent","handleOpenFullEvent","event","handleCloseFullEvent","isModeChanging","setIsModeChanging","selectedLiveModel","setSelectedLiveModel","audioRef","console","log","data","message","camera_id","has_rgb","has_tir","person_detected","rgb_length","length","tir_length","prev","newFrames","checkConnection","setInterval","socket","connected","id","clearInterval","startAllStreams","error","Promise","resolve","setTimeout","model","isAdmin","undefined","stopAllStreams","current","play","catch","role","loadDefaultModel","response","defaultModel","default_model","localStorage","setItem","Object","values","some","streaming","savedModel","getItem","handleModeChange","newMode","alert","children","className","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","process","env","NODE_ENV","username","map","_liveFrames$cameraId","_liveFrames$cameraId2","Fragment","frameData","onStreamClick","onOpenFull","onClose","ref","src","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/frontend/src/components/Dashboard.js"],"sourcesContent":["// src/components/Dashboard.js\r\nimport React, { useEffect, useState, useCallback, useMemo, useRef, useContext } from 'react';\r\nimport VideoStream from './VideoStream';\r\nimport EventLog from './EventLog';\r\nimport TestModePanel from './TestModePanel';\r\nimport FullscreenViewer from './FullscreenViewer';\r\nimport EventDetailViewer from './EventDetailViewer';\r\nimport { initSocket, disconnectSocket, subscribeToEvent, sendEvent, getSocket } from '../services/socket';\r\nimport { getDefaultModel } from '../services/api';\r\nimport AuthContext from '../context/AuthContext';\r\nimport alertSound from '../assets/alarm.mp3';\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const [serverMessage, setServerMessage] = useState('');\r\n  const [mode, setMode] = useState('live');\r\n\r\n  // 카메라가 1대라면 [0], 2대면 [0,1]로 변경\r\n  const cameraIds = useMemo(() => [0], []);\r\n\r\n  // 프레임/상태\r\n  const [liveFrames, setLiveFrames] = useState({ 0: { rgb: null, tir: null } });\r\n  const [isStreaming, setIsStreaming] = useState({ 0: false });\r\n  const [personDetected, setPersonDetected] = useState({ 0: false });\r\n\r\n  // ✅ 모달 상태: 스냅샷이 아니라 \"선택 정보\"만 저장\r\n  // { cameraId, stream: 'rgb' | 'tir', title }\r\n  const [viewer, setViewer] = useState(null);\r\n  const openViewer = (cameraId, stream, title) => setViewer({ cameraId, stream, title });\r\n  const closeViewer = () => setViewer(null);\r\n\r\n  // 전체 화면 이벤트 뷰어 상태\r\n  const [fullViewEvent, setFullViewEvent] = useState(null);\r\n  const handleOpenFullEvent = (event) => setFullViewEvent(event);\r\n  const handleCloseFullEvent = () => setFullViewEvent(null);\r\n\r\n  // 모드 전환 중 상태 (백엔드 호환성을 위해 추가)\r\n  const [isModeChanging, setIsModeChanging] = useState(false);\r\n\r\n  // 실시간 감시용 모델 관리 (간소화)\r\n  const [selectedLiveModel, setSelectedLiveModel] = useState('yolo11n_early_fusion.pt');\r\n\r\n  const audioRef = useRef(null);\r\n\r\n  // 소켓 연결/해제 및 이벤트 수신 전용 useEffect\r\n  useEffect(() => {\r\n    console.log('Dashboard 컴포넌트 마운트 - 소켓 초기화 시작');\r\n    initSocket();\r\n    \r\n    // 서버 응답 메시지 수신\r\n    subscribeToEvent('response', (data) => { \r\n      console.log('서버 응답 수신:', data);\r\n      setServerMessage(data.message); \r\n    });\r\n    \r\n    // 비디오 프레임 수신\r\n    subscribeToEvent('video_frame', (data) => {\r\n      console.log('비디오 프레임 수신:', {\r\n        camera_id: data.camera_id,\r\n        has_rgb: !!data.rgb,\r\n        has_tir: !!data.tir,\r\n        person_detected: data.person_detected,\r\n        rgb_length: data.rgb ? data.rgb.length : 0,\r\n        tir_length: data.tir ? data.tir.length : 0\r\n      });\r\n      \r\n      if (typeof data.camera_id === 'number') {\r\n        console.log(`카메라 ${data.camera_id} 프레임 처리 중...`);\r\n        setLiveFrames(prev => {\r\n          const newFrames = { ...prev, [data.camera_id]: { rgb: data.rgb, tir: data.tir } };\r\n          console.log(`새 프레임 설정:`, newFrames);\r\n          return newFrames;\r\n        });\r\n        setPersonDetected(prev => ({ ...prev, [data.camera_id]: data.person_detected }));\r\n        console.log(`카메라 ${data.camera_id} 프레임 처리 완료`);\r\n      } else if (data.camera_id === 'test_video') {\r\n        console.log('시험 영상 프레임 수신');\r\n      }\r\n    });\r\n    \r\n    // 연결 상태 확인 (백엔드 호환성을 위해 추가)\r\n    const checkConnection = setInterval(() => {\r\n      const socket = getSocket();\r\n      if (socket) {\r\n        console.log('소켓 연결 상태:', socket.connected, 'ID:', socket.id);\r\n      }\r\n    }, 5000);\r\n    \r\n    return () => { \r\n      console.log('Dashboard 컴포넌트 언마운트 - 소켓 정리');\r\n      clearInterval(checkConnection);\r\n      disconnectSocket(); \r\n    };\r\n  }, []);\r\n\r\n  // 실시간 스트림 시작 함수 (백엔드 호환성을 위해 복원)\r\n  const startAllStreams = useCallback(async () => {\r\n    console.log('실시간 스트림 시작 시도...');\r\n    setIsModeChanging(true);\r\n    \r\n    try {\r\n      // 소켓 연결 상태 확인\r\n      const socket = getSocket();\r\n      if (!socket || !socket.connected) {\r\n        console.error('소켓이 연결되지 않았습니다. 소켓 초기화를 다시 시도합니다.');\r\n        initSocket();\r\n        // 잠시 대기 후 다시 시도\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n      \r\n      // 모든 카메라에 대해 스트림 시작 요청 (선택된 모델 포함)\r\n      for (const id of cameraIds) {\r\n        console.log(`카메라 ${id + 1} 스트림 시작 요청 (모델: ${selectedLiveModel})`);\r\n        sendEvent('start_stream', { \r\n          camera_id: id,\r\n          model: isAdmin ? selectedLiveModel : undefined  // 관리자만 모델 지정\r\n        });\r\n        setIsStreaming(prev => ({ ...prev, [id]: true }));\r\n      }\r\n      \r\n      // 스트림 상태 초기화\r\n      console.log('스트림 상태 초기화 중...');\r\n      setLiveFrames({ 0: { rgb: null, tir: null } });\r\n      setPersonDetected({ 0: false });\r\n      console.log('초기 상태 설정 완료');\r\n      \r\n      console.log('실시간 스트림 시작 완료');\r\n    } catch (error) {\r\n      console.error('스트림 시작 오류:', error);\r\n    } finally {\r\n      setIsModeChanging(false);\r\n    }\r\n  }, [cameraIds]);\r\n\r\n  // 모든 스트림을 중지하는 함수 (백엔드 호환성을 위해 복원)\r\n  const stopAllStreams = useCallback(async () => {\r\n    console.log('모든 스트림 중지 시도...');\r\n    setIsModeChanging(true);\r\n    \r\n    try {\r\n      // 모든 카메라에 대해 스트림 중지 요청\r\n      for (const id of cameraIds) {\r\n        console.log(`카메라 ${id + 1} 스트림 중지 요청`);\r\n        sendEvent('stop_stream', { camera_id: id });\r\n      }\r\n      \r\n      // 스트림 상태 초기화\r\n      setIsStreaming({ 0: false });\r\n      setLiveFrames({ 0: { rgb: null, tir: null } });\r\n      setPersonDetected({ 0: false });\r\n      \r\n      console.log('모든 스트림 중지 완료');\r\n    } catch (error) {\r\n      console.error('스트림 중지 오류:', error);\r\n    } finally {\r\n      setIsModeChanging(false);\r\n    }\r\n  }, [cameraIds]);\r\n\r\n  // 모드 변경에 따라 스트림 시작/중지 (백엔드 호환성을 위해 수정)\r\n  useEffect(() => {\r\n    if (isModeChanging) return; // 모드 변경 중이면 무시\r\n    \r\n    if (mode === 'live') {\r\n      console.log('실시간 모드로 전환 - 스트림 시작');\r\n      // 실시간 모드로 전환 시 즉시 스트림 시작\r\n      startAllStreams();\r\n    } else {\r\n      console.log('시험 모드로 전환 - 스트림 중지');\r\n      // 시험 모드로 전환 시 즉시 스트림 중지\r\n      stopAllStreams();\r\n    }\r\n  }, [mode, startAllStreams, stopAllStreams, isModeChanging]);\r\n\r\n  // 알람음 (옵션)\r\n  useEffect(() => {\r\n    if (personDetected[0] && audioRef.current) {\r\n      audioRef.current.play().catch(error => console.error(\"오디오 재생 오류:\", error));\r\n    }\r\n  }, [personDetected]);\r\n\r\n  // 관리자 권한 체크 (AdminRoute와 동일한 기준)\r\n  const isAdmin = user && user.role === 'admin';\r\n  \r\n  // 디버깅: 사용자 정보 확인\r\n  useEffect(() => {\r\n    console.log('현재 사용자 정보:', user);\r\n    console.log('관리자 권한:', isAdmin);\r\n    if (user) {\r\n      console.log('사용자 역할:', user.role);\r\n    }\r\n  }, [user, isAdmin]);\r\n\r\n  // settings.json에서 기본 모델 동기화\r\n  useEffect(() => {\r\n    const loadDefaultModel = async () => {\r\n      try {\r\n        const response = await getDefaultModel();\r\n        const defaultModel = response.data.default_model;\r\n        setSelectedLiveModel(defaultModel);\r\n        localStorage.setItem('selectedLiveModel', defaultModel);\r\n        console.log('Dashboard: settings.json에서 기본 모델 로드:', defaultModel);\r\n        \r\n        // 모델 로드 후 즉시 스트림 재시작 (실시간 모드인 경우)\r\n        if (mode === 'live' && Object.values(isStreaming).some(streaming => streaming)) {\r\n          console.log('기본 모델 변경으로 인한 스트림 재시작');\r\n          stopAllStreams();\r\n          setTimeout(() => startAllStreams(), 1000);\r\n        }\r\n      } catch (error) {\r\n        // 오류 시 localStorage fallback\r\n        const savedModel = localStorage.getItem('selectedLiveModel');\r\n        if (savedModel) {\r\n          setSelectedLiveModel(savedModel);\r\n        }\r\n        console.error('기본 모델 로드 실패:', error);\r\n      }\r\n    };\r\n    \r\n    loadDefaultModel();\r\n  }, [mode, isStreaming, startAllStreams, stopAllStreams]);\r\n\r\n  // 모드 변경 핸들러 (백엔드 호환성을 위해 추가)\r\n  const handleModeChange = (newMode) => {\r\n    if (isModeChanging) return; // 모드 변경 중이면 무시\r\n    \r\n    // 테스트 모드는 관리자만 접근 가능 (AdminRoute와 동일한 체크)\r\n    if (newMode === 'test' && (!user || user.role !== 'admin')) {\r\n      alert('테스트 영상 분석 기능은 관리자만 사용할 수 있습니다.');\r\n      return;\r\n    }\r\n    \r\n    console.log(`모드 변경: ${mode} -> ${newMode}`);\r\n    setMode(newMode);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* 상단 모드 토글 */}\r\n      <div className=\"flex justify-center space-x-4 mb-4\">\r\n        <button\r\n          onClick={() => handleModeChange('live')}\r\n          disabled={isModeChanging}\r\n          className={`px-6 py-2 font-bold text-white rounded-lg transition-colors ${\r\n            mode === 'live' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'\r\n          } ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n        >\r\n          {isModeChanging && mode === 'live' ? '전환 중...' : '실시간 다중 감시'}\r\n        </button>\r\n        {user && isAdmin && (\r\n          <button\r\n            onClick={() => handleModeChange('test')}\r\n            disabled={isModeChanging}\r\n            className={`px-6 py-2 font-bold text-white rounded-lg transition-colors ${\r\n              mode === 'test' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'\r\n            } ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n          >\r\n            {isModeChanging && mode === 'test' ? '전환 중...' : '시험 영상 분석 (관리자)'}\r\n          </button>\r\n        )}\r\n        \r\n        {/* 임시 디버깅 정보 */}\r\n        {process.env.NODE_ENV === 'development' && (\r\n          <div className=\"text-xs text-gray-400 mt-2\">\r\n            <p>사용자: {user ? user.username : '없음'}</p>\r\n            <p>역할: {user ? user.role : '없음'}</p>\r\n            <p>관리자: {isAdmin ? '예' : '아니오'}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n\r\n\r\n      {/* 모드 전환 중 표시 (백엔드 호환성을 위해 추가) */}\r\n      {isModeChanging && (\r\n        <div className=\"text-center mb-4 p-2 bg-blue-900 rounded-lg\">\r\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white mx-auto\"></div>\r\n          <p className=\"text-white mt-2\">모드 전환 중...</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:items-start\">\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {mode === 'live' ? (\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              {cameraIds.map(cameraId => (\r\n                <React.Fragment key={`${cameraId}-rgb`}>\r\n                  <VideoStream\r\n                    title={`카메라 ${cameraId + 1} - RGB`}\r\n                    frameData={liveFrames[cameraId]?.rgb}\r\n                    isStreaming={isStreaming[cameraId]}\r\n                    onStreamClick={() => openViewer(cameraId, 'rgb', `카메라 ${cameraId + 1} - RGB`)}\r\n                    personDetected={personDetected[cameraId]}\r\n                  />\r\n                  <VideoStream\r\n                    title={`카메라 ${cameraId + 1} - TIR`}\r\n                    frameData={liveFrames[cameraId]?.tir}\r\n                    isStreaming={isStreaming[cameraId]}\r\n                    onStreamClick={() => openViewer(cameraId, 'tir', `카메라 ${cameraId + 1} - TIR`)}\r\n                    personDetected={personDetected[cameraId]}\r\n                  />\r\n                </React.Fragment>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <TestModePanel />\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"space-y-6 h-full\">\r\n          {serverMessage && (\r\n            <div className=\"p-4 bg-blue-900 rounded-lg text-center mb-4\">{serverMessage}</div>\r\n          )}\r\n          {/* 실시간 모드에서만 이벤트 로그 표시 */}\r\n          {mode === 'live' && (\r\n            <EventLog onOpenFull={handleOpenFullEvent} />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* ✅ 모달: 현재 liveFrames에서 프레임을 꺼내 전달 → 실시간 갱신 */}\r\n      {viewer && (\r\n        <FullscreenViewer\r\n          title={viewer.title}\r\n          frameData={liveFrames[viewer.cameraId]?.[viewer.stream]}\r\n          onClose={closeViewer}\r\n        />\r\n      )}\r\n\r\n      {/* 이벤트 상세 뷰어 렌더링 */}\r\n      {fullViewEvent && (\r\n        <EventDetailViewer event={fullViewEvent} onClose={handleCloseFullEvent} />\r\n      )}\r\n\r\n      <audio ref={audioRef} src={alertSound} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}