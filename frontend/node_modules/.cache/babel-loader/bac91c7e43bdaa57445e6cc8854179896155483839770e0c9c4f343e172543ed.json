{"ast":null,"code":"// src/services/socket.js\nimport { io } from 'socket.io-client';\nlet socket;\nexport const initSocket = () => {\n  if (socket) return socket;\n\n  // 환경변수가 없으면 기본값 사용\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n  socket = io(apiUrl);\n  socket.on('connect', () => {\n    console.log('Socket.IO 서버에 연결되었습니다. ID:', socket.id);\n  });\n  socket.on('disconnect', () => {\n    console.log('Socket.IO 서버 연결이 끊어졌습니다.');\n    socket = null;\n  });\n  socket.on('connect_error', error => {\n    console.error('Socket.IO 연결 오류:', error);\n  });\n  return socket;\n};\nexport const disconnectSocket = () => {\n  if (socket) {\n    console.log('Socket.IO 연결 해제 중...');\n    socket.disconnect();\n    socket = null;\n  }\n};\nexport const sendEvent = (eventName, data) => {\n  if (socket && socket.connected) {\n    console.log(`소켓 이벤트 전송: ${eventName}`, data);\n    socket.emit(eventName, data);\n  } else {\n    console.warn('소켓이 연결되지 않았습니다. 이벤트 전송 실패:', eventName);\n  }\n};\nexport const subscribeToEvent = (eventName, callback) => {\n  if (!socket) {\n    console.warn('소켓이 초기화되지 않았습니다. initSocket()을 먼저 호출하세요.');\n    return null;\n  }\n  console.log(`이벤트 구독: ${eventName}`);\n  socket.on(eventName, callback);\n\n  // 구독 해제 함수 반환\n  return () => {\n    console.log(`이벤트 구독 해제: ${eventName}`);\n    socket.off(eventName, callback);\n  };\n};\nexport const unsubscribeFromEvent = (eventName, callback) => {\n  if (!socket) return;\n  console.log(`이벤트 구독 해제: ${eventName}`);\n  socket.off(eventName, callback);\n};\n\n// 소켓 연결 상태 확인\nexport const isSocketConnected = () => {\n  return socket && socket.connected;\n};\n\n// 소켓 인스턴스 반환 (디버깅용)\nexport const getSocket = () => {\n  return socket;\n};","map":{"version":3,"names":["io","socket","initSocket","apiUrl","process","env","REACT_APP_API_URL","on","console","log","id","error","disconnectSocket","disconnect","sendEvent","eventName","data","connected","emit","warn","subscribeToEvent","callback","off","unsubscribeFromEvent","isSocketConnected","getSocket"],"sources":["D:/Project2/DashBoard/frontend/src/services/socket.js"],"sourcesContent":["// src/services/socket.js\r\nimport { io } from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nexport const initSocket = () => {\r\n  if (socket) return socket;\r\n  \r\n  // 환경변수가 없으면 기본값 사용\r\n  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n  socket = io(apiUrl);\r\n\r\n  socket.on('connect', () => {\r\n    console.log('Socket.IO 서버에 연결되었습니다. ID:', socket.id);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Socket.IO 서버 연결이 끊어졌습니다.');\r\n    socket = null;\r\n  });\r\n\r\n  socket.on('connect_error', (error) => {\r\n    console.error('Socket.IO 연결 오류:', error);\r\n  });\r\n\r\n  return socket;\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    console.log('Socket.IO 연결 해제 중...');\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\nexport const sendEvent = (eventName, data) => {\r\n  if (socket && socket.connected) {\r\n    console.log(`소켓 이벤트 전송: ${eventName}`, data);\r\n    socket.emit(eventName, data);\r\n  } else {\r\n    console.warn('소켓이 연결되지 않았습니다. 이벤트 전송 실패:', eventName);\r\n  }\r\n};\r\n\r\nexport const subscribeToEvent = (eventName, callback) => {\r\n  if (!socket) {\r\n    console.warn('소켓이 초기화되지 않았습니다. initSocket()을 먼저 호출하세요.');\r\n    return null;\r\n  }\r\n\r\n  console.log(`이벤트 구독: ${eventName}`);\r\n  socket.on(eventName, callback);\r\n\r\n  // 구독 해제 함수 반환\r\n  return () => {\r\n    console.log(`이벤트 구독 해제: ${eventName}`);\r\n    socket.off(eventName, callback);\r\n  };\r\n};\r\n\r\nexport const unsubscribeFromEvent = (eventName, callback) => {\r\n  if (!socket) return;\r\n  \r\n  console.log(`이벤트 구독 해제: ${eventName}`);\r\n  socket.off(eventName, callback);\r\n};\r\n\r\n// 소켓 연결 상태 확인\r\nexport const isSocketConnected = () => {\r\n  return socket && socket.connected;\r\n};\r\n\r\n// 소켓 인스턴스 반환 (디버깅용)\r\nexport const getSocket = () => {\r\n  return socket;\r\n};"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,IAAIC,MAAM;AAEV,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,IAAID,MAAM,EAAE,OAAOA,MAAM;;EAEzB;EACA,MAAME,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACvEL,MAAM,GAAGD,EAAE,CAACG,MAAM,CAAC;EAEnBF,MAAM,CAACM,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAER,MAAM,CAACS,EAAE,CAAC;EACtD,CAAC,CAAC;EAEFT,MAAM,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCR,MAAM,GAAG,IAAI;EACf,CAAC,CAAC;EAEFA,MAAM,CAACM,EAAE,CAAC,eAAe,EAAGI,KAAK,IAAK;IACpCH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;EAC1C,CAAC,CAAC;EAEF,OAAOV,MAAM;AACf,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIX,MAAM,EAAE;IACVO,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCR,MAAM,CAACY,UAAU,CAAC,CAAC;IACnBZ,MAAM,GAAG,IAAI;EACf;AACF,CAAC;AAED,OAAO,MAAMa,SAAS,GAAGA,CAACC,SAAS,EAAEC,IAAI,KAAK;EAC5C,IAAIf,MAAM,IAAIA,MAAM,CAACgB,SAAS,EAAE;IAC9BT,OAAO,CAACC,GAAG,CAAC,cAAcM,SAAS,EAAE,EAAEC,IAAI,CAAC;IAC5Cf,MAAM,CAACiB,IAAI,CAACH,SAAS,EAAEC,IAAI,CAAC;EAC9B,CAAC,MAAM;IACLR,OAAO,CAACW,IAAI,CAAC,4BAA4B,EAAEJ,SAAS,CAAC;EACvD;AACF,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAGA,CAACL,SAAS,EAAEM,QAAQ,KAAK;EACvD,IAAI,CAACpB,MAAM,EAAE;IACXO,OAAO,CAACW,IAAI,CAAC,0CAA0C,CAAC;IACxD,OAAO,IAAI;EACb;EAEAX,OAAO,CAACC,GAAG,CAAC,WAAWM,SAAS,EAAE,CAAC;EACnCd,MAAM,CAACM,EAAE,CAACQ,SAAS,EAAEM,QAAQ,CAAC;;EAE9B;EACA,OAAO,MAAM;IACXb,OAAO,CAACC,GAAG,CAAC,cAAcM,SAAS,EAAE,CAAC;IACtCd,MAAM,CAACqB,GAAG,CAACP,SAAS,EAAEM,QAAQ,CAAC;EACjC,CAAC;AACH,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAGA,CAACR,SAAS,EAAEM,QAAQ,KAAK;EAC3D,IAAI,CAACpB,MAAM,EAAE;EAEbO,OAAO,CAACC,GAAG,CAAC,cAAcM,SAAS,EAAE,CAAC;EACtCd,MAAM,CAACqB,GAAG,CAACP,SAAS,EAAEM,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAOvB,MAAM,IAAIA,MAAM,CAACgB,SAAS;AACnC,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAOxB,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}