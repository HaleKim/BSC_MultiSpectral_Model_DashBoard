{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\ver.2\\\\frontend\\\\src\\\\components\\\\EventLog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getEvents } from '../services/api';\nimport { subscribeToEvent, unsubscribeFromEvent } from '../services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventLog = () => {\n  _s();\n  // 1. 초기 상태를 undefined가 아닌 빈 배열([])로 명확하게 설정합니다.\n  // 이렇게 하면 데이터가 오기 전에도 .map 함수가 오류 없이 실행됩니다.\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const {\n          data\n        } = await getEvents();\n        // 백엔드에서 받은 데이터가 배열이 아닐 경우를 대비해 한번 더 방어합니다.\n        if (Array.isArray(data)) {\n          setEvents(data);\n        }\n      } catch (error) {\n        console.error(\"이벤트 로그를 가져오는 데 실패했습니다:\", error);\n      }\n    };\n    fetchEvents();\n    subscribeToEvent('new_event', newEvent => {\n      // 실시간으로 들어오는 이벤트는 기존 목록의 맨 위에 추가합니다.\n      setEvents(prevEvents => [newEvent, ...prevEvents]);\n    });\n    return () => {\n      unsubscribeFromEvent('new_event');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-800 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-semibold mb-2 text-white\",\n      children: \"\\uC2E4\\uC2DC\\uAC04 \\uC774\\uBCA4\\uD2B8 \\uB85C\\uADF8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2 h-96 overflow-y-auto\",\n      children: events.length > 0 ? events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 bg-gray-700 rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-semibold text-red-400\",\n          children: event.event_type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-400\",\n          children: new Date(event.timestamp).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center pt-4\",\n        children: \"\\uD45C\\uC2DC\\uD560 \\uC774\\uBCA4\\uD2B8\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(EventLog, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = EventLog;\nexport default EventLog;\nvar _c;\n$RefreshReg$(_c, \"EventLog\");","map":{"version":3,"names":["React","useState","useEffect","getEvents","subscribeToEvent","unsubscribeFromEvent","jsxDEV","_jsxDEV","EventLog","_s","events","setEvents","fetchEvents","data","Array","isArray","error","console","newEvent","prevEvents","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","event","event_type","Date","timestamp","toLocaleString","id","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/ver.2/frontend/src/components/EventLog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getEvents } from '../services/api';\r\nimport { subscribeToEvent, unsubscribeFromEvent } from '../services/socket';\r\n\r\nconst EventLog = () => {\r\n    // 1. 초기 상태를 undefined가 아닌 빈 배열([])로 명확하게 설정합니다.\r\n    // 이렇게 하면 데이터가 오기 전에도 .map 함수가 오류 없이 실행됩니다.\r\n    const [events, setEvents] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            try {\r\n                const { data } = await getEvents();\r\n                // 백엔드에서 받은 데이터가 배열이 아닐 경우를 대비해 한번 더 방어합니다.\r\n                if (Array.isArray(data)) {\r\n                    setEvents(data);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"이벤트 로그를 가져오는 데 실패했습니다:\", error);\r\n            }\r\n        };\r\n        fetchEvents();\r\n        \r\n        subscribeToEvent('new_event', (newEvent) => {\r\n            // 실시간으로 들어오는 이벤트는 기존 목록의 맨 위에 추가합니다.\r\n            setEvents(prevEvents => [newEvent, ...prevEvents]);\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeFromEvent('new_event');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"p-4 bg-gray-800 rounded-lg shadow-lg\">\r\n            <h3 className=\"text-lg font-semibold mb-2 text-white\">실시간 이벤트 로그</h3>\r\n            <div className=\"space-y-2 h-96 overflow-y-auto\">\r\n                {/* 2. events 배열의 길이가 0일 경우를 대비한 UI를 추가합니다. */}\r\n                {events.length > 0 ? (\r\n                    events.map((event) => (\r\n                        <div key={event.id} className=\"p-3 bg-gray-700 rounded-md\">\r\n                            <p className=\"font-semibold text-red-400\">{event.event_type}</p>\r\n                            <p className=\"text-xs text-gray-400\">{new Date(event.timestamp).toLocaleString()}</p>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"text-gray-500 text-center pt-4\">표시할 이벤트가 없습니다.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventLog;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,gBAAgB,EAAEC,oBAAoB,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB;EACA;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMV,SAAS,CAAC,CAAC;QAClC;QACA,IAAIW,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;UACrBF,SAAS,CAACE,IAAI,CAAC;QACnB;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IACDJ,WAAW,CAAC,CAAC;IAEbR,gBAAgB,CAAC,WAAW,EAAGc,QAAQ,IAAK;MACxC;MACAP,SAAS,CAACQ,UAAU,IAAI,CAACD,QAAQ,EAAE,GAAGC,UAAU,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF,OAAO,MAAM;MACTd,oBAAoB,CAAC,WAAW,CAAC;IACrC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIE,OAAA;IAAKa,SAAS,EAAC,sCAAsC;IAAAC,QAAA,gBACjDd,OAAA;MAAIa,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrElB,OAAA;MAAKa,SAAS,EAAC,gCAAgC;MAAAC,QAAA,EAE1CX,MAAM,CAACgB,MAAM,GAAG,CAAC,GACdhB,MAAM,CAACiB,GAAG,CAAEC,KAAK,iBACbrB,OAAA;QAAoBa,SAAS,EAAC,4BAA4B;QAAAC,QAAA,gBACtDd,OAAA;UAAGa,SAAS,EAAC,4BAA4B;UAAAC,QAAA,EAAEO,KAAK,CAACC;QAAU;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChElB,OAAA;UAAGa,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAE,IAAIS,IAAI,CAACF,KAAK,CAACG,SAAS,CAAC,CAACC,cAAc,CAAC;QAAC;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAF/EG,KAAK,CAACK,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACR,CAAC,gBAEFlB,OAAA;QAAGa,SAAS,EAAC,gCAAgC;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAClE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAChB,EAAA,CA/CID,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAiDd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}