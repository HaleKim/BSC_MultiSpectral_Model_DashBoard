{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// /frontend/src/components/Dashboard.js (최종 수정본)\n\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from 'react';\nimport VideoStream from './VideoStream';\nimport EventLog from './EventLog';\nimport TestModePanel from './TestModePanel';\nimport FullscreenViewer from './FullscreenViewer';\nimport EventDetailViewer from './EventDetailViewer';\nimport { initSocket, disconnectSocket, subscribeToEvent, sendEvent, getSocket } from '../services/socket';\nimport alertSound from '../assets/alarm.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  var _liveFrames$, _liveFrames$3;\n  // 서버로부터 받은 메시지를 저장할 상태\n  const [serverMessage, setServerMessage] = useState('');\n  // 현재 모드 상태 (실시간 감시 모드 또는 시험 영상 분석 모드)\n  const [mode, setMode] = useState('live');\n  // 로컬 PC 웹캠 ID 목록\n  const cameraIds = useMemo(() => [0], []);\n  // 각 카메라의 프레임과 스트리밍 상태를 객체로 관리\n  const [liveFrames, setLiveFrames] = useState({\n    0: {\n      rgb: null,\n      tir: null\n    }\n  });\n  const [isStreaming, setIsStreaming] = useState({\n    0: false\n  });\n  // 각 카메라별 사람 탐지 여부 상태\n  const [personDetected, setPersonDetected] = useState({\n    0: false\n  });\n  // 전체 화면 이벤트 뷰어 상태\n  const [fullViewEvent, setFullViewEvent] = useState(null);\n  // 전체 화면으로 표시할 스트림의 상태\n  const [fullscreenStream, setFullscreenStream] = useState({\n    source: null,\n    frameData: null,\n    title: ''\n  });\n  // 오디오 재생을 위한 ref\n  const audioRef = useRef(null);\n  // 모드 전환 중 상태\n  const [isModeChanging, setIsModeChanging] = useState(false);\n\n  // VideoStream 컴포넌트를 클릭했을 때 호출될 함수\n  const handleStreamClick = (title, source, frameData) => {\n    setFullscreenStream({\n      title,\n      source,\n      frameData\n    });\n  };\n\n  // 전체 화면 뷰어를 닫는 함수\n  const handleCloseFullscreen = () => {\n    setFullscreenStream({\n      source: null,\n      frameData: null,\n      title: ''\n    });\n  };\n\n  // 전체 화면 이벤트를 열고 닫는 함수\n  const handleOpenFullEvent = event => {\n    setFullViewEvent(event);\n  };\n\n  // 전체 화면 이벤트를 닫는 함수\n  const handleCloseFullEvent = () => {\n    setFullViewEvent(null);\n  };\n\n  // 실시간 스트림 시작 함수\n  const startAllStreams = useCallback(async () => {\n    console.log('실시간 스트림 시작 시도...');\n    setIsModeChanging(true);\n    try {\n      // 소켓 연결 상태 확인\n      const socket = getSocket();\n      if (!socket || !socket.connected) {\n        console.error('소켓이 연결되지 않았습니다. 소켓 초기화를 다시 시도합니다.');\n        initSocket();\n        // 잠시 대기 후 다시 시도\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      // 모든 카메라에 대해 스트림 시작 요청\n      for (const id of cameraIds) {\n        console.log(`카메라 ${id} 스트림 시작 요청`);\n        sendEvent('start_stream', {\n          camera_id: id\n        });\n        setIsStreaming(prev => ({\n          ...prev,\n          [id]: true\n        }));\n      }\n\n      // 스트림 상태 초기화\n      setLiveFrames({\n        0: {\n          rgb: null,\n          tir: null\n        }\n      });\n      setPersonDetected({\n        0: false\n      });\n      console.log('실시간 스트림 시작 완료');\n    } catch (error) {\n      console.error('스트림 시작 오류:', error);\n    } finally {\n      setIsModeChanging(false);\n    }\n  }, [cameraIds]);\n\n  // 모든 스트림을 중지하는 함수\n  const stopAllStreams = useCallback(async () => {\n    console.log('모든 스트림 중지 시도...');\n    setIsModeChanging(true);\n    try {\n      // 모든 카메라에 대해 스트림 중지 요청\n      for (const id of cameraIds) {\n        console.log(`카메라 ${id} 스트림 중지 요청`);\n        sendEvent('stop_stream', {\n          camera_id: id\n        });\n      }\n\n      // 스트림 상태 초기화\n      setIsStreaming({\n        0: false\n      });\n      setLiveFrames({\n        0: {\n          rgb: null,\n          tir: null\n        }\n      });\n      setPersonDetected({\n        0: false\n      });\n      console.log('모든 스트림 중지 완료');\n    } catch (error) {\n      console.error('스트림 중지 오류:', error);\n    } finally {\n      setIsModeChanging(false);\n    }\n  }, [cameraIds]);\n\n  // 소켓 연결/해제 및 이벤트 수신 전용 useEffect\n  useEffect(() => {\n    console.log('Dashboard 컴포넌트 마운트 - 소켓 초기화 시작');\n    initSocket();\n\n    // 서버 응답 메시지 수신\n    subscribeToEvent('response', data => {\n      console.log('서버 응답 수신:', data);\n      setServerMessage(data.message);\n    });\n\n    // 비디오 프레임 수신\n    subscribeToEvent('video_frame', data => {\n      console.log('비디오 프레임 수신:', {\n        camera_id: data.camera_id,\n        has_rgb: !!data.rgb,\n        has_tir: !!data.tir,\n        person_detected: data.person_detected\n      });\n      if (typeof data.camera_id === 'number') {\n        console.log(`카메라 ${data.camera_id} 프레임 처리 중...`);\n        setLiveFrames(prev => ({\n          ...prev,\n          [data.camera_id]: {\n            rgb: data.rgb,\n            tir: data.tir\n          }\n        }));\n        setPersonDetected(prev => ({\n          ...prev,\n          [data.camera_id]: data.person_detected\n        }));\n        console.log(`카메라 ${data.camera_id} 프레임 처리 완료`);\n      } else if (data.camera_id === 'test_video') {\n        console.log('시험 영상 프레임 수신');\n      }\n    });\n\n    // 연결 상태 확인\n    const checkConnection = setInterval(() => {\n      const socket = getSocket();\n      if (socket) {\n        console.log('소켓 연결 상태:', socket.connected, 'ID:', socket.id);\n      }\n    }, 5000);\n    return () => {\n      console.log('Dashboard 컴포넌트 언마운트 - 소켓 정리');\n      clearInterval(checkConnection);\n      disconnectSocket();\n    };\n  }, []);\n\n  // 모드 변경에 따라 스트림 시작/중지\n  useEffect(() => {\n    if (isModeChanging) return; // 모드 변경 중이면 무시\n\n    if (mode === 'live') {\n      console.log('실시간 모드로 전환 - 스트림 시작');\n      // 실시간 모드로 전환 시 즉시 스트림 시작\n      startAllStreams();\n    } else {\n      console.log('시험 모드로 전환 - 스트림 중지');\n      // 시험 모드로 전환 시 즉시 스트림 중지\n      stopAllStreams();\n    }\n  }, [mode, startAllStreams, stopAllStreams, isModeChanging]);\n\n  // 오디오 재생을 위한 useEffect\n  useEffect(() => {\n    if (personDetected[0]) {\n      if (audioRef.current) {\n        audioRef.current.play().catch(error => console.error(\"오디오 재생 오류:\", error));\n      }\n    }\n  }, [personDetected]);\n\n  // --- 전체 화면 영상 실시간 업데이트 ---\n  useEffect(() => {\n    if (fullscreenStream.source) {\n      var _liveFrames$camera;\n      const {\n        camera,\n        type\n      } = fullscreenStream.source;\n      const newFrame = (_liveFrames$camera = liveFrames[camera]) === null || _liveFrames$camera === void 0 ? void 0 : _liveFrames$camera[type];\n      if (newFrame) {\n        setFullscreenStream(prev => ({\n          ...prev,\n          frameData: newFrame\n        }));\n      }\n    }\n  }, [liveFrames, fullscreenStream.source]);\n\n  // 모드 변경 핸들러\n  const handleModeChange = newMode => {\n    if (isModeChanging) return; // 모드 변경 중이면 무시\n\n    console.log(`모드 변경: ${mode} -> ${newMode}`);\n    setMode(newMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange('live'),\n        disabled: isModeChanging,\n        className: `px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'live' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'} ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`,\n        children: isModeChanging && mode === 'live' ? '전환 중...' : '실시간 다중 감시'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange('test'),\n        disabled: isModeChanging,\n        className: `px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'test' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'} ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`,\n        children: isModeChanging && mode === 'test' ? '전환 중...' : '시험 영상 분석'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), isModeChanging && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-4 p-2 bg-blue-900 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-6 w-6 border-b-2 border-white mx-auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white mt-2\",\n        children: \"\\uBAA8\\uB4DC \\uC804\\uD658 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:items-start\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-2 space-y-6\",\n        children: mode === 'live' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(VideoStream, {\n            title: \"\\uCE74\\uBA54\\uB77C 1 - RGB\",\n            frameData: (_liveFrames$ = liveFrames[0]) === null || _liveFrames$ === void 0 ? void 0 : _liveFrames$.rgb,\n            isStreaming: isStreaming[0],\n            onStreamClick: () => {\n              var _liveFrames$2;\n              return handleStreamClick('카메라 1 - RGB', {\n                camera: 0,\n                type: 'rgb'\n              }, (_liveFrames$2 = liveFrames[0]) === null || _liveFrames$2 === void 0 ? void 0 : _liveFrames$2.rgb);\n            },\n            personDetected: personDetected[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(VideoStream, {\n            title: \"\\uCE74\\uBA54\\uB77C 1 - TIR\",\n            frameData: (_liveFrames$3 = liveFrames[0]) === null || _liveFrames$3 === void 0 ? void 0 : _liveFrames$3.tir,\n            isStreaming: isStreaming[0],\n            onStreamClick: () => {\n              var _liveFrames$4;\n              return handleStreamClick('카메라 1 - TIR', {\n                camera: 0,\n                type: 'tir'\n              }, (_liveFrames$4 = liveFrames[0]) === null || _liveFrames$4 === void 0 ? void 0 : _liveFrames$4.tir);\n            },\n            personDetected: personDetected[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TestModePanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6 h-full\",\n        children: [serverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-blue-900 rounded-lg text-center mb-4\",\n          children: serverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(EventLog, {\n          onOpenFull: handleOpenFullEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), fullscreenStream.source && /*#__PURE__*/_jsxDEV(FullscreenViewer, {\n      title: fullscreenStream.title,\n      frameData: fullscreenStream.frameData,\n      onClose: handleCloseFullscreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), fullViewEvent && /*#__PURE__*/_jsxDEV(EventDetailViewer, {\n      event: fullViewEvent,\n      onClose: handleCloseFullEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: alertSound\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"WOkQQXQ6l/4Iulxr355tmPEhUh4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useMemo","VideoStream","EventLog","TestModePanel","FullscreenViewer","EventDetailViewer","initSocket","disconnectSocket","subscribeToEvent","sendEvent","getSocket","alertSound","jsxDEV","_jsxDEV","Dashboard","_s","_liveFrames$","_liveFrames$3","serverMessage","setServerMessage","mode","setMode","cameraIds","liveFrames","setLiveFrames","rgb","tir","isStreaming","setIsStreaming","personDetected","setPersonDetected","fullViewEvent","setFullViewEvent","fullscreenStream","setFullscreenStream","source","frameData","title","audioRef","isModeChanging","setIsModeChanging","handleStreamClick","handleCloseFullscreen","handleOpenFullEvent","event","handleCloseFullEvent","startAllStreams","console","log","socket","connected","error","Promise","resolve","setTimeout","id","camera_id","prev","stopAllStreams","data","message","has_rgb","has_tir","person_detected","checkConnection","setInterval","clearInterval","current","play","catch","_liveFrames$camera","camera","type","newFrame","handleModeChange","newMode","children","className","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onStreamClick","_liveFrames$2","_liveFrames$4","onOpenFull","onClose","ref","src","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/frontend/src/components/Dashboard.js"],"sourcesContent":["// /frontend/src/components/Dashboard.js (최종 수정본)\r\n\r\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from 'react';\r\nimport VideoStream from './VideoStream';\r\nimport EventLog from './EventLog';\r\nimport TestModePanel from './TestModePanel';\r\nimport FullscreenViewer from './FullscreenViewer';\r\nimport EventDetailViewer from './EventDetailViewer';\r\nimport { initSocket, disconnectSocket, subscribeToEvent, sendEvent, getSocket } from '../services/socket';\r\nimport alertSound from '../assets/alarm.mp3';\r\n\r\nconst Dashboard = () => {\r\n  // 서버로부터 받은 메시지를 저장할 상태\r\n  const [serverMessage, setServerMessage] = useState('');\r\n  // 현재 모드 상태 (실시간 감시 모드 또는 시험 영상 분석 모드)\r\n  const [mode, setMode] = useState('live');\r\n  // 로컬 PC 웹캠 ID 목록\r\n  const cameraIds = useMemo(() => [0], []);\r\n  // 각 카메라의 프레임과 스트리밍 상태를 객체로 관리\r\n  const [liveFrames, setLiveFrames] = useState({ 0: { rgb: null, tir: null } });\r\n  const [isStreaming, setIsStreaming] = useState({ 0: false });\r\n  // 각 카메라별 사람 탐지 여부 상태\r\n  const [personDetected, setPersonDetected] = useState({ 0: false });\r\n  // 전체 화면 이벤트 뷰어 상태\r\n  const [fullViewEvent, setFullViewEvent] = useState(null);\r\n  // 전체 화면으로 표시할 스트림의 상태\r\n  const [fullscreenStream, setFullscreenStream] = useState({\r\n    source: null, \r\n    frameData: null,\r\n    title: ''\r\n  });\r\n  // 오디오 재생을 위한 ref\r\n  const audioRef = useRef(null);\r\n  // 모드 전환 중 상태\r\n  const [isModeChanging, setIsModeChanging] = useState(false);\r\n\r\n  // VideoStream 컴포넌트를 클릭했을 때 호출될 함수\r\n  const handleStreamClick = (title, source, frameData) => {\r\n    setFullscreenStream({ title, source, frameData });\r\n  };\r\n  \r\n  // 전체 화면 뷰어를 닫는 함수\r\n  const handleCloseFullscreen = () => {\r\n    setFullscreenStream({ source: null, frameData: null, title: '' });\r\n  };\r\n\r\n  // 전체 화면 이벤트를 열고 닫는 함수\r\n  const handleOpenFullEvent = (event) => {\r\n    setFullViewEvent(event);\r\n  };\r\n  \r\n  // 전체 화면 이벤트를 닫는 함수\r\n  const handleCloseFullEvent = () => {\r\n    setFullViewEvent(null);\r\n  };\r\n\r\n  // 실시간 스트림 시작 함수\r\n  const startAllStreams = useCallback(async () => {\r\n    console.log('실시간 스트림 시작 시도...');\r\n    setIsModeChanging(true);\r\n    \r\n    try {\r\n      // 소켓 연결 상태 확인\r\n      const socket = getSocket();\r\n      if (!socket || !socket.connected) {\r\n        console.error('소켓이 연결되지 않았습니다. 소켓 초기화를 다시 시도합니다.');\r\n        initSocket();\r\n        // 잠시 대기 후 다시 시도\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n      \r\n      // 모든 카메라에 대해 스트림 시작 요청\r\n      for (const id of cameraIds) {\r\n        console.log(`카메라 ${id} 스트림 시작 요청`);\r\n        sendEvent('start_stream', { camera_id: id });\r\n        setIsStreaming(prev => ({ ...prev, [id]: true }));\r\n      }\r\n      \r\n      // 스트림 상태 초기화\r\n      setLiveFrames({ 0: { rgb: null, tir: null } });\r\n      setPersonDetected({ 0: false });\r\n      \r\n      console.log('실시간 스트림 시작 완료');\r\n    } catch (error) {\r\n      console.error('스트림 시작 오류:', error);\r\n    } finally {\r\n      setIsModeChanging(false);\r\n    }\r\n  }, [cameraIds]);\r\n\r\n  // 모든 스트림을 중지하는 함수\r\n  const stopAllStreams = useCallback(async () => {\r\n    console.log('모든 스트림 중지 시도...');\r\n    setIsModeChanging(true);\r\n    \r\n    try {\r\n      // 모든 카메라에 대해 스트림 중지 요청\r\n      for (const id of cameraIds) {\r\n        console.log(`카메라 ${id} 스트림 중지 요청`);\r\n        sendEvent('stop_stream', { camera_id: id });\r\n      }\r\n      \r\n      // 스트림 상태 초기화\r\n      setIsStreaming({ 0: false });\r\n      setLiveFrames({ 0: { rgb: null, tir: null } });\r\n      setPersonDetected({ 0: false });\r\n      \r\n      console.log('모든 스트림 중지 완료');\r\n    } catch (error) {\r\n      console.error('스트림 중지 오류:', error);\r\n    } finally {\r\n      setIsModeChanging(false);\r\n    }\r\n  }, [cameraIds]);\r\n\r\n  // 소켓 연결/해제 및 이벤트 수신 전용 useEffect\r\n  useEffect(() => {\r\n    console.log('Dashboard 컴포넌트 마운트 - 소켓 초기화 시작');\r\n    initSocket();\r\n    \r\n    // 서버 응답 메시지 수신\r\n    subscribeToEvent('response', (data) => { \r\n      console.log('서버 응답 수신:', data);\r\n      setServerMessage(data.message); \r\n    });\r\n    \r\n    // 비디오 프레임 수신\r\n    subscribeToEvent('video_frame', (data) => {\r\n      console.log('비디오 프레임 수신:', {\r\n        camera_id: data.camera_id,\r\n        has_rgb: !!data.rgb,\r\n        has_tir: !!data.tir,\r\n        person_detected: data.person_detected\r\n      });\r\n      \r\n      if (typeof data.camera_id === 'number') {\r\n        console.log(`카메라 ${data.camera_id} 프레임 처리 중...`);\r\n        setLiveFrames(prev => ({ ...prev, [data.camera_id]: { rgb: data.rgb, tir: data.tir } }));\r\n        setPersonDetected(prev => ({ ...prev, [data.camera_id]: data.person_detected }));\r\n        console.log(`카메라 ${data.camera_id} 프레임 처리 완료`);\r\n      } else if (data.camera_id === 'test_video') {\r\n        console.log('시험 영상 프레임 수신');\r\n      }\r\n    });\r\n    \r\n    // 연결 상태 확인\r\n    const checkConnection = setInterval(() => {\r\n      const socket = getSocket();\r\n      if (socket) {\r\n        console.log('소켓 연결 상태:', socket.connected, 'ID:', socket.id);\r\n      }\r\n    }, 5000);\r\n    \r\n    return () => { \r\n      console.log('Dashboard 컴포넌트 언마운트 - 소켓 정리');\r\n      clearInterval(checkConnection);\r\n      disconnectSocket(); \r\n    };\r\n  }, []);\r\n\r\n  // 모드 변경에 따라 스트림 시작/중지\r\n  useEffect(() => {\r\n    if (isModeChanging) return; // 모드 변경 중이면 무시\r\n    \r\n    if (mode === 'live') {\r\n      console.log('실시간 모드로 전환 - 스트림 시작');\r\n      // 실시간 모드로 전환 시 즉시 스트림 시작\r\n      startAllStreams();\r\n    } else {\r\n      console.log('시험 모드로 전환 - 스트림 중지');\r\n      // 시험 모드로 전환 시 즉시 스트림 중지\r\n      stopAllStreams();\r\n    }\r\n  }, [mode, startAllStreams, stopAllStreams, isModeChanging]);\r\n\r\n  // 오디오 재생을 위한 useEffect\r\n  useEffect(() => {\r\n    if (personDetected[0]) {\r\n      if (audioRef.current) {\r\n        audioRef.current.play().catch(error => console.error(\"오디오 재생 오류:\", error));\r\n      }\r\n    }\r\n  }, [personDetected]);\r\n\r\n  // --- 전체 화면 영상 실시간 업데이트 ---\r\n  useEffect(() => {\r\n    if (fullscreenStream.source) {\r\n      const { camera, type } = fullscreenStream.source;\r\n      const newFrame = liveFrames[camera]?.[type];\r\n      if (newFrame) {\r\n        setFullscreenStream(prev => ({ ...prev, frameData: newFrame }));\r\n      }\r\n    }\r\n  }, [liveFrames, fullscreenStream.source]);\r\n\r\n  // 모드 변경 핸들러\r\n  const handleModeChange = (newMode) => {\r\n    if (isModeChanging) return; // 모드 변경 중이면 무시\r\n    \r\n    console.log(`모드 변경: ${mode} -> ${newMode}`);\r\n    setMode(newMode);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-center space-x-4 mb-4\">\r\n        <button \r\n          onClick={() => handleModeChange('live')} \r\n          disabled={isModeChanging}\r\n          className={`px-6 py-2 font-bold text-white rounded-lg transition-colors ${\r\n            mode === 'live' \r\n              ? 'bg-cyan-600' \r\n              : 'bg-gray-600 hover:bg-gray-700'\r\n          } ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n        >\r\n          {isModeChanging && mode === 'live' ? '전환 중...' : '실시간 다중 감시'}\r\n        </button>\r\n        <button \r\n          onClick={() => handleModeChange('test')} \r\n          disabled={isModeChanging}\r\n          className={`px-6 py-2 font-bold text-white rounded-lg transition-colors ${\r\n            mode === 'test' \r\n              ? 'bg-cyan-600' \r\n              : 'bg-gray-600 hover:bg-gray-700'\r\n          } ${isModeChanging ? 'opacity-50 cursor-not-allowed' : ''}`}\r\n        >\r\n          {isModeChanging && mode === 'test' ? '전환 중...' : '시험 영상 분석'}\r\n        </button>\r\n      </div>\r\n\r\n      {isModeChanging && (\r\n        <div className=\"text-center mb-4 p-2 bg-blue-900 rounded-lg\">\r\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white mx-auto\"></div>\r\n          <p className=\"text-white mt-2\">모드 전환 중...</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:items-start\">\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {mode === 'live' ? (\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <VideoStream \r\n                title=\"카메라 1 - RGB\" \r\n                frameData={liveFrames[0]?.rgb} \r\n                isStreaming={isStreaming[0]} \r\n                onStreamClick={() => handleStreamClick('카메라 1 - RGB', { camera: 0, type: 'rgb' }, liveFrames[0]?.rgb)} \r\n                personDetected={personDetected[0]} \r\n              />\r\n              <VideoStream \r\n                title=\"카메라 1 - TIR\" \r\n                frameData={liveFrames[0]?.tir} \r\n                isStreaming={isStreaming[0]} \r\n                onStreamClick={() => handleStreamClick('카메라 1 - TIR', { camera: 0, type: 'tir' }, liveFrames[0]?.tir)} \r\n                personDetected={personDetected[0]} \r\n              />\r\n            </div>\r\n          ) : (\r\n            <TestModePanel />\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"space-y-6 h-full\">\r\n          {serverMessage && <div className=\"p-4 bg-blue-900 rounded-lg text-center mb-4\">{serverMessage}</div>}\r\n          <EventLog onOpenFull={handleOpenFullEvent} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* fullscreenStream 상태가 유효할 때만 FullscreenViewer를 렌더링*/}\r\n      {fullscreenStream.source && (\r\n        <FullscreenViewer\r\n          title={fullscreenStream.title}\r\n          frameData={fullscreenStream.frameData}\r\n          onClose={handleCloseFullscreen}\r\n        />\r\n      )}\r\n\r\n      {/* 이벤트 상세 뷰어 렌더링 */}\r\n      {fullViewEvent && (\r\n        <EventDetailViewer event={fullViewEvent} onClose={handleCloseFullEvent} />\r\n      )}\r\n\r\n      {/* 오디오 태그에 ref와 src 연결 */}\r\n      <audio ref={audioRef} src={alertSound} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}