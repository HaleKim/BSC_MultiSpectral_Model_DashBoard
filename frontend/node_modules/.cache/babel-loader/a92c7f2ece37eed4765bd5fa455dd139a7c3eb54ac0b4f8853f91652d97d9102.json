{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\ver_2\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// /frontend/src/components/Dashboard.js (최종 수정본)\n\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from 'react';\nimport VideoStream from './VideoStream';\nimport EventLog from './EventLog';\nimport TestModePanel from './TestModePanel';\nimport FullscreenViewer from './FullscreenViewer';\nimport EventDetailViewer from './EventDetailViewer';\nimport { initSocket, disconnectSocket, subscribeToEvent, sendEvent } from '../services/socket';\nimport alertSound from '../assets/alarm.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  var _liveFrames$, _liveFrames$3;\n  // 서버로부터 받은 메시지를 저장할 상태\n  const [serverMessage, setServerMessage] = useState('');\n  // 현재 모드 상태 (실시간 감시 모드 또는 시험 영상 분석 모드)\n  const [mode, setMode] = useState('live');\n  // 로컬 PC 웹캠 ID 목록\n  // const cameraIds = useMemo(() => [0, 1], []);\n  // 웹캠이 하나일때\n  const cameraIds = useMemo(() => [0], []);\n  // 각 카메라의 프레임과 스트리밍 상태를 객체로 관리\n  // const [liveFrames, setLiveFrames] = useState({ 0: { rgb: null, tir: null }, 1: { rgb: null, tir: null } });\n  // const [isStreaming, setIsStreaming] = useState({ 0: false, 1: false });\n  // 웹캠이 하나일때\n  const [liveFrames, setLiveFrames] = useState({\n    0: {\n      rgb: null,\n      tir: null\n    }\n  });\n  const [isStreaming, setIsStreaming] = useState({\n    0: false\n  });\n  // 각 카메라별 사람 탐지 여부 상태\n  // const [personDetected, setPersonDetected] = useState({ 0: false, 1: false });\n  // 웹캠이 하나일때\n  const [personDetected, setPersonDetected] = useState({\n    0: false\n  });\n  // 전체 화면 이벤트 뷰어 상태\n  const [fullViewEvent, setFullViewEvent] = useState(null);\n  // 전체 화면으로 표시할 스트림의 상태\n  const [fullscreenStream, setFullscreenStream] = useState({\n    source: null,\n    frameData: null,\n    title: ''\n  });\n  // 오디오 재생을 위한 ref\n  const audioRef = useRef(null);\n\n  // VideoStream 컴포넌트를 클릭했을 때 호출될 함수\n  const handleStreamClick = (title, source, frameData) => {\n    setFullscreenStream({\n      title,\n      source,\n      frameData\n    });\n  };\n  // 전체 화면 뷰어를 닫는 함수\n  const handleCloseFullscreen = () => {\n    setFullscreenStream({\n      source: null,\n      frameData: null,\n      title: ''\n    });\n  };\n\n  // 전체 화면 이벤트를 열고 닫는 함수\n  const handleOpenFullEvent = event => {\n    setFullViewEvent(event);\n  };\n  // 전체 화면 이벤트를 닫는 함수\n  const handleCloseFullEvent = () => {\n    setFullViewEvent(null);\n  };\n\n  // 소켓 연결/해제 전용 useEffect (컴포넌트 로드/언로드 시 딱 한 번만 실행)\n  useEffect(() => {\n    initSocket();\n    subscribeToEvent('response', data => {\n      setServerMessage(data.message);\n    });\n    subscribeToEvent('video_frame', data => {\n      if (typeof data.camera_id === 'number') {\n        setLiveFrames(prev => ({\n          ...prev,\n          [data.camera_id]: {\n            rgb: data.rgb,\n            tir: data.tir\n          }\n        }));\n        setPersonDetected(prev => ({\n          ...prev,\n          [data.camera_id]: data.person_detected\n        }));\n      }\n    });\n\n    // 컴포넌트가 사라질 때 소켓 연결을 완전히 해제\n    return () => {\n      disconnectSocket();\n    };\n  }, []); // <-- 의존성 배열을 비워서 최초 1회만 실행되도록 함\n\n  // 실시간 스트림 시작 및 중지 함수\n  const startAllStreams = useCallback(() => {\n    cameraIds.forEach(id => {\n      sendEvent('start_stream', {\n        camera_id: id\n      });\n      setIsStreaming(prev => ({\n        ...prev,\n        [id]: true\n      }));\n    });\n  }, [cameraIds]);\n\n  // 모든 스트림을 중지하는 함수\n  const stopAllStreams = useCallback(() => {\n    cameraIds.forEach(id => {\n      sendEvent('stop_stream', {\n        camera_id: id\n      });\n    });\n    setIsStreaming({\n      0: false,\n      1: false\n    });\n    setLiveFrames({\n      0: {\n        rgb: null,\n        tir: null\n      },\n      1: {\n        rgb: null,\n        tir: null\n      }\n    });\n    setPersonDetected({\n      0: false,\n      1: false\n    });\n  }, [cameraIds]);\n\n  // 소켓 연결/해제 및 이벤트 수신 전용 useEffect\n  useEffect(() => {\n    initSocket();\n    subscribeToEvent('response', data => {\n      setServerMessage(data.message);\n    });\n    subscribeToEvent('video_frame', data => {\n      if (typeof data.camera_id === 'number') {\n        setLiveFrames(prev => ({\n          ...prev,\n          [data.camera_id]: {\n            rgb: data.rgb,\n            tir: data.tir\n          }\n        }));\n        setPersonDetected(prev => ({\n          ...prev,\n          [data.camera_id]: data.person_detected\n        }));\n      }\n    });\n    return () => {\n      disconnectSocket();\n    };\n  }, []);\n\n  // 모드 변경에 따라 스트림 시작/중지\n  useEffect(() => {\n    if (mode === 'live') {\n      startAllStreams();\n    }\n    return () => {\n      stopAllStreams();\n    };\n  }, [mode, startAllStreams, stopAllStreams]);\n\n  // 오디오 재생을 위한 useEffect\n  useEffect(() => {\n    if (personDetected[0] || personDetected[1]) {\n      if (audioRef.current) {\n        audioRef.current.play().catch(error => console.error(\"오디오 재생 오류:\", error));\n      }\n    }\n  }, [personDetected]);\n\n  // --- 전체 화면 영상 실시간 업데이트 ---\n  useEffect(() => {\n    if (fullscreenStream.source) {\n      var _liveFrames$camera;\n      const {\n        camera,\n        type\n      } = fullscreenStream.source;\n      const newFrame = (_liveFrames$camera = liveFrames[camera]) === null || _liveFrames$camera === void 0 ? void 0 : _liveFrames$camera[type];\n      if (newFrame) {\n        setFullscreenStream(prev => ({\n          ...prev,\n          frameData: newFrame\n        }));\n      }\n    }\n  }, [liveFrames, fullscreenStream.source]);\n\n  // 모드 변경 핸들러\n  const handleModeChange = newMode => {\n    setMode(newMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center space-x-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange('live'),\n        className: `px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'live' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'}`,\n        children: \"\\uC2E4\\uC2DC\\uAC04 \\uB2E4\\uC911 \\uAC10\\uC2DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange('test'),\n        className: `px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'test' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'}`,\n        children: \"\\uC2DC\\uD5D8 \\uC601\\uC0C1 \\uBD84\\uC11D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:items-start\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-2 space-y-6\",\n        children: mode === 'live' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(VideoStream, {\n            title: \"\\uCE74\\uBA54\\uB77C 1 - RGB\",\n            frameData: (_liveFrames$ = liveFrames[0]) === null || _liveFrames$ === void 0 ? void 0 : _liveFrames$.rgb,\n            isStreaming: isStreaming[0],\n            onStreamClick: () => {\n              var _liveFrames$2;\n              return handleStreamClick('카메라 1 - RGB', {\n                camera: 0,\n                type: 'rgb'\n              }, (_liveFrames$2 = liveFrames[0]) === null || _liveFrames$2 === void 0 ? void 0 : _liveFrames$2.rgb);\n            },\n            personDetected: personDetected[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(VideoStream, {\n            title: \"\\uCE74\\uBA54\\uB77C 1 - TIR\",\n            frameData: (_liveFrames$3 = liveFrames[0]) === null || _liveFrames$3 === void 0 ? void 0 : _liveFrames$3.tir,\n            isStreaming: isStreaming[0],\n            onStreamClick: () => {\n              var _liveFrames$4;\n              return handleStreamClick('카메라 1 - TIR', {\n                camera: 0,\n                type: 'tir'\n              }, (_liveFrames$4 = liveFrames[0]) === null || _liveFrames$4 === void 0 ? void 0 : _liveFrames$4.tir);\n            },\n            personDetected: personDetected[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TestModePanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6 h-full\",\n        children: [serverMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-4 bg-blue-900 rounded-lg text-center mb-4\",\n          children: serverMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(EventLog, {\n          onOpenFull: handleOpenFullEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), fullscreenStream && /*#__PURE__*/_jsxDEV(FullscreenViewer, {\n      title: fullscreenStream.title,\n      frameData: fullscreenStream.frameData,\n      onClose: handleCloseFullscreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), fullViewEvent && /*#__PURE__*/_jsxDEV(EventDetailViewer, {\n      event: fullViewEvent,\n      onClose: handleCloseFullEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: alertSound\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"z78zhekumajtIfNwrh1h7opE+ZI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useMemo","VideoStream","EventLog","TestModePanel","FullscreenViewer","EventDetailViewer","initSocket","disconnectSocket","subscribeToEvent","sendEvent","alertSound","jsxDEV","_jsxDEV","Dashboard","_s","_liveFrames$","_liveFrames$3","serverMessage","setServerMessage","mode","setMode","cameraIds","liveFrames","setLiveFrames","rgb","tir","isStreaming","setIsStreaming","personDetected","setPersonDetected","fullViewEvent","setFullViewEvent","fullscreenStream","setFullscreenStream","source","frameData","title","audioRef","handleStreamClick","handleCloseFullscreen","handleOpenFullEvent","event","handleCloseFullEvent","data","message","camera_id","prev","person_detected","startAllStreams","forEach","id","stopAllStreams","current","play","catch","error","console","_liveFrames$camera","camera","type","newFrame","handleModeChange","newMode","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onStreamClick","_liveFrames$2","_liveFrames$4","onOpenFull","onClose","ref","src","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/ver_2/frontend/src/components/Dashboard.js"],"sourcesContent":["// /frontend/src/components/Dashboard.js (최종 수정본)\r\n\r\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from 'react';\r\nimport VideoStream from './VideoStream';\r\nimport EventLog from './EventLog';\r\nimport TestModePanel from './TestModePanel';\r\nimport FullscreenViewer from './FullscreenViewer';\r\nimport EventDetailViewer from './EventDetailViewer';\r\nimport { initSocket, disconnectSocket, subscribeToEvent, sendEvent } from '../services/socket';\r\nimport alertSound from '../assets/alarm.mp3';\r\n\r\nconst Dashboard = () => {\r\n  // 서버로부터 받은 메시지를 저장할 상태\r\n  const [serverMessage, setServerMessage] = useState('');\r\n  // 현재 모드 상태 (실시간 감시 모드 또는 시험 영상 분석 모드)\r\n  const [mode, setMode] = useState('live');\r\n  // 로컬 PC 웹캠 ID 목록\r\n  // const cameraIds = useMemo(() => [0, 1], []);\r\n  // 웹캠이 하나일때\r\n  const cameraIds = useMemo(() => [0], []);\r\n  // 각 카메라의 프레임과 스트리밍 상태를 객체로 관리\r\n  // const [liveFrames, setLiveFrames] = useState({ 0: { rgb: null, tir: null }, 1: { rgb: null, tir: null } });\r\n  // const [isStreaming, setIsStreaming] = useState({ 0: false, 1: false });\r\n  // 웹캠이 하나일때\r\n  const [liveFrames, setLiveFrames] = useState({ 0: { rgb: null, tir: null } });\r\n  const [isStreaming, setIsStreaming] = useState({ 0: false });\r\n  // 각 카메라별 사람 탐지 여부 상태\r\n  // const [personDetected, setPersonDetected] = useState({ 0: false, 1: false });\r\n  // 웹캠이 하나일때\r\n  const [personDetected, setPersonDetected] = useState({ 0: false });\r\n  // 전체 화면 이벤트 뷰어 상태\r\n  const [fullViewEvent, setFullViewEvent] = useState(null);\r\n  // 전체 화면으로 표시할 스트림의 상태\r\n  const [fullscreenStream, setFullscreenStream] = useState({\r\n    source: null, \r\n    frameData: null,\r\n    title: ''\r\n  });\r\n  // 오디오 재생을 위한 ref\r\n  const audioRef = useRef(null);\r\n\r\n  // VideoStream 컴포넌트를 클릭했을 때 호출될 함수\r\n  const handleStreamClick = (title, source, frameData) => {\r\n    setFullscreenStream({ title, source, frameData });\r\n  };\r\n  // 전체 화면 뷰어를 닫는 함수\r\n  const handleCloseFullscreen = () => {\r\n    setFullscreenStream({ source: null, frameData: null, title: '' });\r\n  };\r\n\r\n  // 전체 화면 이벤트를 열고 닫는 함수\r\n  const handleOpenFullEvent = (event) => {\r\n    setFullViewEvent(event);\r\n  };\r\n  // 전체 화면 이벤트를 닫는 함수\r\n  const handleCloseFullEvent = () => {\r\n    setFullViewEvent(null);\r\n  };\r\n\r\n  // 소켓 연결/해제 전용 useEffect (컴포넌트 로드/언로드 시 딱 한 번만 실행)\r\n  useEffect(() => {\r\n    initSocket();\r\n    \r\n    subscribeToEvent('response', (data) => {\r\n      setServerMessage(data.message);\r\n    });\r\n    \r\n    subscribeToEvent('video_frame', (data) => {\r\n      if (typeof data.camera_id === 'number') {\r\n        setLiveFrames(prev => ({ ...prev, [data.camera_id]: { rgb: data.rgb, tir: data.tir } }));\r\n        setPersonDetected(prev => ({ ...prev, [data.camera_id]: data.person_detected }));\r\n      }\r\n    });\r\n\r\n    // 컴포넌트가 사라질 때 소켓 연결을 완전히 해제\r\n    return () => {\r\n      disconnectSocket();\r\n    };\r\n  }, []); // <-- 의존성 배열을 비워서 최초 1회만 실행되도록 함\r\n\r\n  // 실시간 스트림 시작 및 중지 함수\r\n  const startAllStreams = useCallback(() => {\r\n    cameraIds.forEach(id => {\r\n      sendEvent('start_stream', { camera_id: id });\r\n      setIsStreaming(prev => ({ ...prev, [id]: true }));\r\n    });\r\n  }, [cameraIds]);\r\n\r\n  // 모든 스트림을 중지하는 함수\r\n  const stopAllStreams = useCallback(() => {\r\n    cameraIds.forEach(id => {\r\n      sendEvent('stop_stream', { camera_id: id });\r\n    });\r\n    setIsStreaming({ 0: false, 1: false });\r\n    setLiveFrames({ 0: { rgb: null, tir: null }, 1: { rgb: null, tir: null } });\r\n    setPersonDetected({ 0: false, 1: false });\r\n  }, [cameraIds]);\r\n\r\n  // 소켓 연결/해제 및 이벤트 수신 전용 useEffect\r\n  useEffect(() => {\r\n    initSocket();\r\n    subscribeToEvent('response', (data) => { setServerMessage(data.message); });\r\n    subscribeToEvent('video_frame', (data) => {\r\n      if (typeof data.camera_id === 'number') {\r\n        setLiveFrames(prev => ({ ...prev, [data.camera_id]: { rgb: data.rgb, tir: data.tir } }));\r\n        setPersonDetected(prev => ({ ...prev, [data.camera_id]: data.person_detected }));\r\n      }\r\n    });\r\n    return () => { disconnectSocket(); };\r\n  }, []);\r\n\r\n  // 모드 변경에 따라 스트림 시작/중지\r\n  useEffect(() => {\r\n    if (mode === 'live') {\r\n      startAllStreams();\r\n    }\r\n    return () => {\r\n      stopAllStreams();\r\n    };\r\n  }, [mode, startAllStreams, stopAllStreams]);\r\n\r\n  // 오디오 재생을 위한 useEffect\r\n  useEffect(() => {\r\n    if (personDetected[0] || personDetected[1]) {\r\n      if (audioRef.current) {\r\n        audioRef.current.play().catch(error => console.error(\"오디오 재생 오류:\", error));\r\n      }\r\n    }\r\n  }, [personDetected]);\r\n\r\n  // --- 전체 화면 영상 실시간 업데이트 ---\r\n  useEffect(() => {\r\n    if (fullscreenStream.source) {\r\n      const { camera, type } = fullscreenStream.source;\r\n      const newFrame = liveFrames[camera]?.[type];\r\n      if (newFrame) {\r\n        setFullscreenStream(prev => ({ ...prev, frameData: newFrame }));\r\n      }\r\n    }\r\n  }, [liveFrames, fullscreenStream.source]);\r\n\r\n  // 모드 변경 핸들러\r\n  const handleModeChange = (newMode) => {\r\n    setMode(newMode);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex justify-center space-x-4 mb-4\">\r\n        <button onClick={() => handleModeChange('live')} className={`px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'live' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'}`}>\r\n          실시간 다중 감시\r\n        </button>\r\n        <button onClick={() => handleModeChange('test')} className={`px-6 py-2 font-bold text-white rounded-lg transition-colors ${mode === 'test' ? 'bg-cyan-600' : 'bg-gray-600 hover:bg-gray-700'}`}>\r\n          시험 영상 분석\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:items-start\">\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {mode === 'live' ? (\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <VideoStream title=\"카메라 1 - RGB\" frameData={liveFrames[0]?.rgb} isStreaming={isStreaming[0]} onStreamClick={() => handleStreamClick('카메라 1 - RGB', { camera: 0, type: 'rgb' }, liveFrames[0]?.rgb)} personDetected={personDetected[0]} />\r\n              <VideoStream title=\"카메라 1 - TIR\" frameData={liveFrames[0]?.tir} isStreaming={isStreaming[0]} onStreamClick={() => handleStreamClick('카메라 1 - TIR', { camera: 0, type: 'tir' }, liveFrames[0]?.tir)} personDetected={personDetected[0]} />\r\n              {/* 웹캠이 하나일때 */}\r\n              {/* <VideoStream title=\"카메라 2 - RGB\" frameData={liveFrames[1]?.rgb} isStreaming={isStreaming[1]} onStreamClick={() => handleStreamClick('카메라 2 - RGB', { camera: 1, type: 'rgb' }, liveFrames[1]?.rgb)} personDetected={personDetected[1]} /> */}\r\n              {/* <VideoStream title=\"카메라 2 - TIR\" frameData={liveFrames[1]?.tir} isStreaming={isStreaming[1]} onStreamClick={() => handleStreamClick('카메라 2 - TIR', { camera: 1, type: 'tir' }, liveFrames[1]?.tir)} personDetected={personDetected[1]} /> */}\r\n            </div>\r\n          ) : (\r\n            <TestModePanel />\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"space-y-6 h-full\">\r\n          {serverMessage && <div className=\"p-4 bg-blue-900 rounded-lg text-center mb-4\">{serverMessage}</div>}\r\n          <EventLog onOpenFull={handleOpenFullEvent} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* fullscreenStream 상태가 유효할 때만 FullscreenViewer를 렌더링*/}\r\n      {fullscreenStream && (\r\n        <FullscreenViewer\r\n          title={fullscreenStream.title}\r\n          frameData={fullscreenStream.frameData}\r\n          onClose={handleCloseFullscreen}\r\n        />\r\n      )}\r\n\r\n      {/* 이벤트 상세 뷰어 렌더링 */}\r\n      {fullViewEvent && (\r\n        <EventDetailViewer event={fullViewEvent} onClose={handleCloseFullEvent} />\r\n      )}\r\n\r\n      {/* 오디오 태그에 ref와 src 연결 */}\r\n      <audio ref={audioRef} src={alertSound} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}