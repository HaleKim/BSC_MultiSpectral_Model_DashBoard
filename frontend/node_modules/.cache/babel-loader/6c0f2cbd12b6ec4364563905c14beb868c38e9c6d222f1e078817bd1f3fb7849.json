{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\ver.2\\\\frontend\\\\src\\\\components\\\\TestModePanel.js\",\n  _s = $RefreshSig$();\n// /frontend/src/components/TestModePanel.js (수정된 최종본)\n\nimport React, { useState, useEffect } from 'react';\nimport { getTestVideos } from '../services/api';\nimport { sendEvent, subscribeToEvent, unsubscribeFromEvent } from '../services/socket';\nimport VideoStream from './VideoStream';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestModePanel = () => {\n  _s();\n  const [testVideos, setTestVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState('');\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [testFrame, setTestFrame] = useState(null); // 시험 영상 프레임 상태 추가\n\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const {\n          data\n        } = await getTestVideos();\n        setTestVideos(data);\n        if (data.length > 0) {\n          setSelectedVideo(data[0]);\n        }\n      } catch (error) {\n        console.error(\"테스트 비디오 목록 로딩 실패:\", error);\n      }\n    };\n    fetchVideos();\n\n    // 시험 영상 프레임 수신 구독\n    subscribeToEvent('video_frame', data => {\n      if (data.camera_id === 'test_video') {\n        setTestFrame(data.image);\n      }\n    });\n    return () => {\n      unsubscribeFromEvent('video_frame');\n      // 컴포넌트 언마운트 시 스트리밍 중지\n      if (isStreaming) {\n        sendEvent('stop_stream', {\n          camera_id: 'test_video'\n        });\n      }\n    };\n  }, [isStreaming]);\n  const handleStartTest = () => {\n    if (selectedVideo) {\n      setTestFrame(null); // 분석 시작 시 이전 프레임 초기화\n      setIsStreaming(true);\n      sendEvent('start_test_stream', {\n        filename: selectedVideo\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-800 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2 text-white\",\n        children: \"\\uC2DC\\uD5D8 \\uC601\\uC0C1 \\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedVideo,\n          onChange: e => setSelectedVideo(e.target.value),\n          className: \"w-full px-3 py-2 text-white bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500\",\n          children: testVideos.map(video => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: video,\n            children: video\n          }, video, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartTest,\n          className: \"px-4 py-2 font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700\",\n          children: \"\\uBD84\\uC11D \\uC2DC\\uC791\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(VideoStream, {\n      title: \"\\uC2DC\\uD5D8 \\uC601\\uC0C1 \\uBD84\\uC11D \\uACB0\\uACFC (RGB/TIR)\",\n      frameData: testFrame,\n      isStreaming: isStreaming\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(TestModePanel, \"ufGpY05d+NyhHkWMhdE+nmymA5Q=\");\n_c = TestModePanel;\nexport default TestModePanel;\nvar _c;\n$RefreshReg$(_c, \"TestModePanel\");","map":{"version":3,"names":["React","useState","useEffect","getTestVideos","sendEvent","subscribeToEvent","unsubscribeFromEvent","VideoStream","jsxDEV","_jsxDEV","TestModePanel","_s","testVideos","setTestVideos","selectedVideo","setSelectedVideo","isStreaming","setIsStreaming","testFrame","setTestFrame","fetchVideos","data","length","error","console","camera_id","image","handleStartTest","filename","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","video","onClick","title","frameData","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/ver.2/frontend/src/components/TestModePanel.js"],"sourcesContent":["// /frontend/src/components/TestModePanel.js (수정된 최종본)\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getTestVideos } from '../services/api';\r\nimport { sendEvent, subscribeToEvent, unsubscribeFromEvent } from '../services/socket';\r\nimport VideoStream from './VideoStream';\r\n\r\nconst TestModePanel = () => {\r\n    const [testVideos, setTestVideos] = useState([]);\r\n    const [selectedVideo, setSelectedVideo] = useState('');\r\n    const [isStreaming, setIsStreaming] = useState(false);\r\n    const [testFrame, setTestFrame] = useState(null); // 시험 영상 프레임 상태 추가\r\n\r\n    useEffect(() => {\r\n        const fetchVideos = async () => {\r\n            try {\r\n                const { data } = await getTestVideos();\r\n                setTestVideos(data);\r\n                if (data.length > 0) {\r\n                    setSelectedVideo(data[0]);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"테스트 비디오 목록 로딩 실패:\", error);\r\n            }\r\n        };\r\n        fetchVideos();\r\n\r\n        // 시험 영상 프레임 수신 구독\r\n        subscribeToEvent('video_frame', (data) => {\r\n            if (data.camera_id === 'test_video') {\r\n                setTestFrame(data.image);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeFromEvent('video_frame');\r\n            // 컴포넌트 언마운트 시 스트리밍 중지\r\n            if (isStreaming) {\r\n                sendEvent('stop_stream', { camera_id: 'test_video' });\r\n            }\r\n        }\r\n    }, [isStreaming]);\r\n\r\n    const handleStartTest = () => {\r\n        if (selectedVideo) {\r\n            setTestFrame(null); // 분석 시작 시 이전 프레임 초기화\r\n            setIsStreaming(true);\r\n            sendEvent('start_test_stream', { filename: selectedVideo });\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className=\"space-y-4\">\r\n            <div className=\"p-4 bg-gray-800 rounded-lg shadow-lg\">\r\n                <h3 className=\"text-lg font-semibold mb-2 text-white\">시험 영상 선택</h3>\r\n                <div className=\"flex space-x-2\">\r\n                    <select \r\n                        value={selectedVideo} \r\n                        onChange={(e) => setSelectedVideo(e.target.value)}\r\n                        className=\"w-full px-3 py-2 text-white bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500\"\r\n                    >\r\n                        {testVideos.map((video) => (\r\n                            <option key={video} value={video}>\r\n                                {video}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <button onClick={handleStartTest} className=\"px-4 py-2 font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700\">\r\n                        분석 시작\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* 수정: VideoStream에 프레임 데이터와 스트리밍 상태 전달 */}\r\n            <VideoStream title=\"시험 영상 분석 결과 (RGB/TIR)\" frameData={testFrame} isStreaming={isStreaming} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestModePanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}