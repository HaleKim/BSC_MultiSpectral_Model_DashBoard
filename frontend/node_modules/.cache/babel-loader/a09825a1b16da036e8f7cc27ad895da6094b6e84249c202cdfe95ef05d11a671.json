{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\ver.2\\\\frontend\\\\src\\\\components\\\\EventLog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getEvents } from '../services/api';\nimport { subscribeToEvent, unsubscribeFromEvent } from '../services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventLog = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    // 초기에 저장된 이벤트 로그를 가져옴\n    const fetchEvents = async () => {\n      try {\n        const {\n          data\n        } = await getEvents();\n        setEvents(data);\n      } catch (error) {\n        console.error(\"이벤트 로그를 가져오는 데 실패했습니다:\", error);\n      }\n    };\n    fetchEvents();\n\n    // 실시간으로 발생하는 새로운 이벤트를 구독\n    subscribeToEvent('new_event', newEvent => {\n      // 기존 이벤트 목록의 맨 위에 새로운 이벤트를 추가\n      setEvents(prevEvents => [newEvent, ...prevEvents]);\n    });\n    return () => {\n      unsubscribeFromEvent('new_event');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-800 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-semibold mb-2 text-white\",\n      children: \"\\uC2E4\\uC2DC\\uAC04 \\uC774\\uBCA4\\uD2B8 \\uB85C\\uADF8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2 h-96 overflow-y-auto\",\n      children: events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 bg-gray-700 rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-semibold text-red-400\",\n          children: event.event_type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-400\",\n          children: new Date(event.timestamp).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(EventLog, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = EventLog;\nexport default EventLog;\nvar _c;\n$RefreshReg$(_c, \"EventLog\");","map":{"version":3,"names":["React","useState","useEffect","getEvents","subscribeToEvent","unsubscribeFromEvent","jsxDEV","_jsxDEV","EventLog","_s","events","setEvents","fetchEvents","data","error","console","newEvent","prevEvents","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","event","event_type","Date","timestamp","toLocaleString","id","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/ver.2/frontend/src/components/EventLog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getEvents } from '../services/api';\r\nimport { subscribeToEvent, unsubscribeFromEvent } from '../services/socket';\r\n\r\nconst EventLog = () => {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // 초기에 저장된 이벤트 로그를 가져옴\r\n    const fetchEvents = async () => {\r\n      try {\r\n        const { data } = await getEvents();\r\n        setEvents(data);\r\n      } catch (error) {\r\n        console.error(\"이벤트 로그를 가져오는 데 실패했습니다:\", error);\r\n      }\r\n    };\r\n    fetchEvents();\r\n    \r\n    // 실시간으로 발생하는 새로운 이벤트를 구독\r\n    subscribeToEvent('new_event', (newEvent) => {\r\n        // 기존 이벤트 목록의 맨 위에 새로운 이벤트를 추가\r\n        setEvents(prevEvents => [newEvent, ...prevEvents]);\r\n    });\r\n\r\n    return () => {\r\n        unsubscribeFromEvent('new_event');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-4 bg-gray-800 rounded-lg shadow-lg\">\r\n      <h3 className=\"text-lg font-semibold mb-2 text-white\">실시간 이벤트 로그</h3>\r\n      <div className=\"space-y-2 h-96 overflow-y-auto\">\r\n        {events.map((event) => (\r\n          <div key={event.id} className=\"p-3 bg-gray-700 rounded-md\">\r\n            <p className=\"font-semibold text-red-400\">{event.event_type}</p>\r\n            <p className=\"text-xs text-gray-400\">{new Date(event.timestamp).toLocaleString()}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventLog;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,gBAAgB,EAAEC,oBAAoB,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMV,SAAS,CAAC,CAAC;QAClCQ,SAAS,CAACE,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IACDF,WAAW,CAAC,CAAC;;IAEb;IACAR,gBAAgB,CAAC,WAAW,EAAGY,QAAQ,IAAK;MACxC;MACAL,SAAS,CAACM,UAAU,IAAI,CAACD,QAAQ,EAAE,GAAGC,UAAU,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF,OAAO,MAAM;MACTZ,oBAAoB,CAAC,WAAW,CAAC;IACrC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEE,OAAA;IAAKW,SAAS,EAAC,sCAAsC;IAAAC,QAAA,gBACnDZ,OAAA;MAAIW,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrEhB,OAAA;MAAKW,SAAS,EAAC,gCAAgC;MAAAC,QAAA,EAC5CT,MAAM,CAACc,GAAG,CAAEC,KAAK,iBAChBlB,OAAA;QAAoBW,SAAS,EAAC,4BAA4B;QAAAC,QAAA,gBACxDZ,OAAA;UAAGW,SAAS,EAAC,4BAA4B;UAAAC,QAAA,EAAEM,KAAK,CAACC;QAAU;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChEhB,OAAA;UAAGW,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAE,IAAIQ,IAAI,CAACF,KAAK,CAACG,SAAS,CAAC,CAACC,cAAc,CAAC;QAAC;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAF7EE,KAAK,CAACK,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CAvCID,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AAyCd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}