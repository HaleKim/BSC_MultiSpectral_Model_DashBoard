{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket;\nexport const initSocket = token => {\n  // 이미 연결된 소켓이 있으면 중복 연결 방지\n  if (socket) return;\n\n  // 백엔드 Socket.IO 서버에 연결합니다.\n  // 인증을 위해 토큰을 쿼리 파라미터로 전달할 수 있습니다 (백엔드 설정 필요).\n  socket = io(process.env.REACT_APP_API_URL, {\n    // auth: { token } // 백엔드에서 JWT로 Socket.IO 인증 시 사용\n  });\n  socket.on('connect', () => {\n    console.log('Socket.IO 서버에 연결되었습니다.');\n  });\n  socket.on('disconnect', () => {\n    console.log('Socket.IO 서버 연결이 끊어졌습니다.');\n    socket = null; // 연결 끊김 시 소켓 객체 정리\n  });\n  return socket;\n};\n\n// 소켓 연결 해제\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\n\n// 소켓 이벤트 송신\nexport const sendEvent = (eventName, data) => {\n  if (socket) {\n    socket.emit(eventName, data);\n  }\n};\n\n// 소켓 이벤트 수신\nexport const subscribeToEvent = (eventName, callback) => {\n  if (!socket) return;\n  socket.on(eventName, callback);\n};\n\n// 소켓 이벤트 구독 해제\nexport const unsubscribeFromEvent = eventName => {\n  if (!socket) return;\n  socket.off(eventName);\n};","map":{"version":3,"names":["io","socket","initSocket","token","process","env","REACT_APP_API_URL","on","console","log","disconnectSocket","disconnect","sendEvent","eventName","data","emit","subscribeToEvent","callback","unsubscribeFromEvent","off"],"sources":["D:/Project2/DashBoard/ver.2/frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nexport const initSocket = (token) => {\r\n  // 이미 연결된 소켓이 있으면 중복 연결 방지\r\n  if (socket) return;\r\n  \r\n  // 백엔드 Socket.IO 서버에 연결합니다.\r\n  // 인증을 위해 토큰을 쿼리 파라미터로 전달할 수 있습니다 (백엔드 설정 필요).\r\n  socket = io(process.env.REACT_APP_API_URL, {\r\n    // auth: { token } // 백엔드에서 JWT로 Socket.IO 인증 시 사용\r\n  });\r\n\r\n  socket.on('connect', () => {\r\n    console.log('Socket.IO 서버에 연결되었습니다.');\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Socket.IO 서버 연결이 끊어졌습니다.');\r\n    socket = null; // 연결 끊김 시 소켓 객체 정리\r\n  });\r\n\r\n  return socket;\r\n};\r\n\r\n// 소켓 연결 해제\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\n// 소켓 이벤트 송신\r\nexport const sendEvent = (eventName, data) => {\r\n  if (socket) {\r\n    socket.emit(eventName, data);\r\n  }\r\n};\r\n\r\n// 소켓 이벤트 수신\r\nexport const subscribeToEvent = (eventName, callback) => {\r\n  if (!socket) return;\r\n  socket.on(eventName, callback);\r\n};\r\n\r\n// 소켓 이벤트 구독 해제\r\nexport const unsubscribeFromEvent = (eventName) => {\r\n    if (!socket) return;\r\n    socket.off(eventName);\r\n}"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AAErC,IAAIC,MAAM;AAEV,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACnC;EACA,IAAIF,MAAM,EAAE;;EAEZ;EACA;EACAA,MAAM,GAAGD,EAAE,CAACI,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE;IACzC;EAAA,CACD,CAAC;EAEFL,MAAM,CAACM,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,CAAC;EAEFR,MAAM,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCR,MAAM,GAAG,IAAI,CAAC,CAAC;EACjB,CAAC,CAAC;EAEF,OAAOA,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIT,MAAM,EAAE;IACVA,MAAM,CAACU,UAAU,CAAC,CAAC;IACnBV,MAAM,GAAG,IAAI;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,SAAS,GAAGA,CAACC,SAAS,EAAEC,IAAI,KAAK;EAC5C,IAAIb,MAAM,EAAE;IACVA,MAAM,CAACc,IAAI,CAACF,SAAS,EAAEC,IAAI,CAAC;EAC9B;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAGA,CAACH,SAAS,EAAEI,QAAQ,KAAK;EACvD,IAAI,CAAChB,MAAM,EAAE;EACbA,MAAM,CAACM,EAAE,CAACM,SAAS,EAAEI,QAAQ,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAIL,SAAS,IAAK;EAC/C,IAAI,CAACZ,MAAM,EAAE;EACbA,MAAM,CAACkB,GAAG,CAACN,SAAS,CAAC;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}