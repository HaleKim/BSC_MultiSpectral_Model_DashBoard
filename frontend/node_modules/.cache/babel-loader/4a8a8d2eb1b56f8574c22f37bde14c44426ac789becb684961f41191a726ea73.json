{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project2\\\\DashBoard\\\\ver.2\\\\frontend\\\\src\\\\components\\\\TestModePanel.js\",\n  _s = $RefreshSig$();\n// /frontend/src/components/TestModePanel.js\n\nimport React, { useState, useEffect } from 'react';\nimport { getTestVideos } from '../services/api';\nimport { sendEvent } from '../services/socket';\nimport VideoStream from './VideoStream';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestModePanel = () => {\n  _s();\n  const [testVideos, setTestVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState('');\n  const [streamEvent, setStreamEvent] = useState(null);\n  useEffect(() => {\n    // 컴포넌트가 로드될 때 테스트 비디오 목록을 가져옵니다.\n    const fetchVideos = async () => {\n      try {\n        const {\n          data\n        } = await getTestVideos();\n        setTestVideos(data);\n        if (data.length > 0) {\n          setSelectedVideo(data[0]); // 첫 번째 비디오를 기본으로 선택\n        }\n      } catch (error) {\n        console.error(\"테스트 비디오 목록 로딩 실패:\", error);\n      }\n    };\n    fetchVideos();\n  }, []);\n  const handleStartTest = () => {\n    if (selectedVideo) {\n      // VideoStream 컴포넌트에 스트리밍 시작 이벤트를 전달합니다.\n      setStreamEvent({\n        type: 'start_test_stream',\n        payload: {\n          filename: selectedVideo\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-800 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2 text-white\",\n        children: \"\\uC2DC\\uD5D8 \\uC601\\uC0C1 \\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedVideo,\n          onChange: e => setSelectedVideo(e.target.value),\n          className: \"w-full px-3 py-2 text-white bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500\",\n          children: testVideos.map(video => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: video,\n            children: video\n          }, video, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartTest,\n          className: \"px-4 py-2 font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700\",\n          children: \"\\uBD84\\uC11D \\uC2DC\\uC791\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(VideoStream, {\n      title: \"\\uC2DC\\uD5D8 \\uC601\\uC0C1 \\uBD84\\uC11D \\uACB0\\uACFC\",\n      streamEvent: streamEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(TestModePanel, \"lhHI52K1e8Ztg7rvbu8E7UMtWwI=\");\n_c = TestModePanel;\nexport default TestModePanel;\nvar _c;\n$RefreshReg$(_c, \"TestModePanel\");","map":{"version":3,"names":["React","useState","useEffect","getTestVideos","sendEvent","VideoStream","jsxDEV","_jsxDEV","TestModePanel","_s","testVideos","setTestVideos","selectedVideo","setSelectedVideo","streamEvent","setStreamEvent","fetchVideos","data","length","error","console","handleStartTest","type","payload","filename","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","video","onClick","title","_c","$RefreshReg$"],"sources":["D:/Project2/DashBoard/ver.2/frontend/src/components/TestModePanel.js"],"sourcesContent":["// /frontend/src/components/TestModePanel.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getTestVideos } from '../services/api';\r\nimport { sendEvent } from '../services/socket';\r\nimport VideoStream from './VideoStream';\r\n\r\nconst TestModePanel = () => {\r\n    const [testVideos, setTestVideos] = useState([]);\r\n    const [selectedVideo, setSelectedVideo] = useState('');\r\n    const [streamEvent, setStreamEvent] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // 컴포넌트가 로드될 때 테스트 비디오 목록을 가져옵니다.\r\n        const fetchVideos = async () => {\r\n            try {\r\n                const { data } = await getTestVideos();\r\n                setTestVideos(data);\r\n                if (data.length > 0) {\r\n                    setSelectedVideo(data[0]); // 첫 번째 비디오를 기본으로 선택\r\n                }\r\n            } catch (error) {\r\n                console.error(\"테스트 비디오 목록 로딩 실패:\", error);\r\n            }\r\n        };\r\n        fetchVideos();\r\n    }, []);\r\n\r\n    const handleStartTest = () => {\r\n        if (selectedVideo) {\r\n            // VideoStream 컴포넌트에 스트리밍 시작 이벤트를 전달합니다.\r\n            setStreamEvent({ type: 'start_test_stream', payload: { filename: selectedVideo } });\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className=\"space-y-4\">\r\n            <div className=\"p-4 bg-gray-800 rounded-lg shadow-lg\">\r\n                <h3 className=\"text-lg font-semibold mb-2 text-white\">시험 영상 선택</h3>\r\n                <div className=\"flex space-x-2\">\r\n                    <select \r\n                        value={selectedVideo} \r\n                        onChange={(e) => setSelectedVideo(e.target.value)}\r\n                        className=\"w-full px-3 py-2 text-white bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500\"\r\n                    >\r\n                        {testVideos.map((video) => (\r\n                            <option key={video} value={video}>\r\n                                {video}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <button onClick={handleStartTest} className=\"px-4 py-2 font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700\">\r\n                        분석 시작\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <VideoStream title=\"시험 영상 분석 결과\" streamEvent={streamEvent} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestModePanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}